{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction These were created using mkdocs . And created with the intention of making my dev notes easily accessible for \"ME\". Having them hosted on a public server is just a happy co-incidence. Organisation On a high level, each different coding tool has a seperate folder. All folders will have a sub-sections and so on. This is all done for my benefit and understanding and not to make the site easily readable. Free-to-use You are free to use any code snippet from here for your own benefit, without attributing any credit to me. Public Since this is hosted on github pages, this is a public repo. There is no other reason. I was not interested in creating a open source project. I am not inclined to maintain this repo for anyone else's benefit other than mine. So please do not create any issues or request any features.","title":"Introduction"},{"location":"#introduction","text":"These were created using mkdocs . And created with the intention of making my dev notes easily accessible for \"ME\". Having them hosted on a public server is just a happy co-incidence.","title":"Introduction"},{"location":"#organisation","text":"On a high level, each different coding tool has a seperate folder. All folders will have a sub-sections and so on. This is all done for my benefit and understanding and not to make the site easily readable.","title":"Organisation"},{"location":"#free-to-use","text":"You are free to use any code snippet from here for your own benefit, without attributing any credit to me.","title":"Free-to-use"},{"location":"#public","text":"Since this is hosted on github pages, this is a public repo. There is no other reason. I was not interested in creating a open source project. I am not inclined to maintain this repo for anyone else's benefit other than mine. So please do not create any issues or request any features.","title":"Public"},{"location":"Dev%20Notes/","text":"Introduction These are the notes for the documentation site you are viewing. Some commands that will help me maintain this site. Hosting and deploys This site is hosted on github repo To push any new change type in mkdocs gh-deploy I have written a script that will deploy the code automatically with the command deploynotes To preview the changes locally use the command mkdocs serve I have written a script that will run the code locally with the command viewnotes Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Introduction"},{"location":"Dev%20Notes/#introduction","text":"These are the notes for the documentation site you are viewing. Some commands that will help me maintain this site.","title":"Introduction"},{"location":"Dev%20Notes/#hosting-and-deploys","text":"This site is hosted on github repo To push any new change type in mkdocs gh-deploy I have written a script that will deploy the code automatically with the command deploynotes To preview the changes locally use the command mkdocs serve I have written a script that will run the code locally with the command viewnotes","title":"Hosting and deploys"},{"location":"Dev%20Notes/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"Dev%20Notes/Current%20Setup/","text":"Auto-backup on iCloud My files are stored in an iCloud folder as a fail safe. So, even if I forget to push the code to git, I have still a copy on iCloud As you can imagine, losing these notes would be catastrophic Using Obsidian to edit the files Obsidian is my editor of choice. Yes, I could use Sublime too. Which I use for writing code. But since I use obsidian for my daily notes, it is always on. So quickly adding a snippet is not a problem. Plus, the predective/assitive text in sublime, while helpful for writing code, is really irritating for normal writing purposes. Aliases on my ~/.zshrc file Since the files are on iCloud folder, navigating to them via terminal and then pushing them on git is a bit impractical. So I added the following aliases on my ~/.zshrc file Just makes my life easier alias viewnotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes\" alias localnotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes; MkDocs serve\" alias deploynotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes; mkdocs gh-deploy; cd\" Commands to use To open the ~/.zshrc file open -e ~/.zshrc To load/source the ~/.zshrc file source ~/.zshrc","title":"Current Setup"},{"location":"Dev%20Notes/Current%20Setup/#commands-to-use","text":"To open the ~/.zshrc file open -e ~/.zshrc To load/source the ~/.zshrc file source ~/.zshrc","title":"Commands to use"},{"location":"Dev%20Notes/Internal%20linking/","text":"Internal linking When I want to add a link to a page from this site itself. How to do To do internal linking, we need to provide relative paths. This is one example Read more at [dotenv](../Basics/Using Dotenv.md)","title":"Internal linking"},{"location":"Dev%20Notes/Internal%20linking/#internal-linking","text":"When I want to add a link to a page from this site itself.","title":"Internal linking"},{"location":"Dev%20Notes/Internal%20linking/#how-to-do","text":"To do internal linking, we need to provide relative paths. This is one example Read more at [dotenv](../Basics/Using Dotenv.md)","title":"How to do"},{"location":"Dev%20Notes/Material%20Theme/","text":"I run the material theme for mkdocs as you can tell by the footer of this page I also have customised this site and will continue to do so, to suit my needs further. My favorite customisation for now, is the placement of the copy snippet button. Small thing, but makes copying code so much easier for me. See the position of the copy button?","title":"Material Theme"},{"location":"Dev%20Notes/Setup%20-%20nvm/","text":"To find all the installed version of node nvm ls To use a specific version of node nvm use v11.14.0 To install a new node version nvm install v11.14.0 To uninstall a specific node version You cannot uninstall an active node version nvm uninstall v14.15.2","title":"Setup   nvm"},{"location":"Dev%20Notes/Setup%20-%20nvm/#to-find-all-the-installed-version-of-node","text":"nvm ls","title":"To find all the installed version of node"},{"location":"Dev%20Notes/Setup%20-%20nvm/#to-use-a-specific-version-of-node","text":"nvm use v11.14.0","title":"To use a specific version of node"},{"location":"Dev%20Notes/Setup%20-%20nvm/#to-install-a-new-node-version","text":"nvm install v11.14.0","title":"To install a new node version"},{"location":"Dev%20Notes/Setup%20-%20nvm/#to-uninstall-a-specific-node-version","text":"You cannot uninstall an active node version nvm uninstall v14.15.2","title":"To uninstall a specific node version"},{"location":"Dev%20Notes/my-mkdocs-config/","text":"My Mkdocs.yml file Copy it directly if you want. site_name: Vedant's Dev Notes theme: name: material features: - navigation.tabs - navigation.instant - toc.integrate - navigation.top #logo: fontawesome/brands/twitter #favicon: images/favicon.png font: text: Inter code: Roboto Mono extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/regular/user-circle link: https://www.vedantlohbare.com - icon: fontawesome/brands/twitter link: https://twitter.com/vedantlohbare - icon: fontawesome/brands/linkedin link: https://www.linkedin.com/in/vedant-lohbare/ - icon: fontawesome/brands/github link: https://github.com/vedant14/dev-notes - icon: fontawesome/brands/strava link: https://www.strava.com/athletes/25910894 dev_addr: \"127.0.0.1:7000\"","title":"My `Mkdocs.yml` file"},{"location":"Dev%20Notes/my-mkdocs-config/#my-mkdocsyml-file","text":"Copy it directly if you want. site_name: Vedant's Dev Notes theme: name: material features: - navigation.tabs - navigation.instant - toc.integrate - navigation.top #logo: fontawesome/brands/twitter #favicon: images/favicon.png font: text: Inter code: Roboto Mono extra_css: - stylesheets/extra.css extra: social: - icon: fontawesome/regular/user-circle link: https://www.vedantlohbare.com - icon: fontawesome/brands/twitter link: https://twitter.com/vedantlohbare - icon: fontawesome/brands/linkedin link: https://www.linkedin.com/in/vedant-lohbare/ - icon: fontawesome/brands/github link: https://github.com/vedant14/dev-notes - icon: fontawesome/brands/strava link: https://www.strava.com/athletes/25910894 dev_addr: \"127.0.0.1:7000\"","title":"My Mkdocs.yml file"},{"location":"Gatsby/","text":"My Gatsby notes I use gatsby to create static sites and landing pages. I just stumbled on this SSG, there are obviously hundreds if not thousand options available. I found it more customisable than jekyll and that is why I have probably used it more extensively than jekyll I use it to create all my landing pages. Although I must say the only thing I hate about gatsby is the time it takes to generate a new build. In comparison, jekyll or mkdocs are almost instantaneous.","title":"My Gatsby notes"},{"location":"Gatsby/#my-gatsby-notes","text":"I use gatsby to create static sites and landing pages. I just stumbled on this SSG, there are obviously hundreds if not thousand options available. I found it more customisable than jekyll and that is why I have probably used it more extensively than jekyll I use it to create all my landing pages. Although I must say the only thing I hate about gatsby is the time it takes to generate a new build. In comparison, jekyll or mkdocs are almost instantaneous.","title":"My Gatsby notes"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/","text":"Import Colors Make sure the colors are in the GlobalStyles.js file import { colors } from \"../../styles/GlobalStyles\" Usage color: ${colors.white}; Media Screen Change the width to get the desired output 786 for table 1024 for desktop @media screen and (min-width: 768px) { margin: 20px; } Importing an image import DateIcon from \"../../images/calendar.svg\" <img src={DateIcon} alt=\"date\" /> Creating a grid Read more here Link display: grid; grid-template-columns: 1fr; grid-gap: 5px; @media (min-width: 768px) { grid-template: 3fr / 1fr 2fr; grid-area: sidebar; } grid-template-areas: \"header header header header\" \"main main . sidebar\" \"footer footer footer footer\"; Using Props Here I am checking if the prop is event background: ${props => props.col % 2 === 0 ? `${colors.off_primary}` : `${colors.nav}`}; Variables in string <Link to={`/properties/${id}`}>","title":"Common styles I use"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#import-colors","text":"Make sure the colors are in the GlobalStyles.js file import { colors } from \"../../styles/GlobalStyles\" Usage color: ${colors.white};","title":"Import Colors"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#media-screen","text":"Change the width to get the desired output 786 for table 1024 for desktop @media screen and (min-width: 768px) { margin: 20px; }","title":"Media Screen"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#importing-an-image","text":"import DateIcon from \"../../images/calendar.svg\" <img src={DateIcon} alt=\"date\" />","title":"Importing an image"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#creating-a-grid","text":"Read more here Link display: grid; grid-template-columns: 1fr; grid-gap: 5px; @media (min-width: 768px) { grid-template: 3fr / 1fr 2fr; grid-area: sidebar; } grid-template-areas: \"header header header header\" \"main main . sidebar\" \"footer footer footer footer\";","title":"Creating a grid"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#using-props","text":"Here I am checking if the prop is event background: ${props => props.col % 2 === 0 ? `${colors.off_primary}` : `${colors.nav}`};","title":"Using Props"},{"location":"Gatsby/Basics/Common%20styles%20I%20use/#variables-in-string","text":"<Link to={`/properties/${id}`}>","title":"Variables in string"},{"location":"Gatsby/Basics/Conditional%20Statements/","text":"Nested conditions in JSX I am checking if YoutubeLink is null and if it is null then if the TwitterLink exists. {item.data.YoutubeLink !== null ? ( <Youtube link={item.data.YoutubeLink} /> ) : ( [ item.data.TwitterLink !== null ? ( <Twitter link={item.data.TwitterLink} /> ) : ( <FeedbackImage link={item.data.SheroesLInk} imageUrl={item.data.Attachments[0].url} /> ), ] )}","title":"Conditional Statements"},{"location":"Gatsby/Basics/Conditional%20Statements/#nested-conditions-in-jsx","text":"I am checking if YoutubeLink is null and if it is null then if the TwitterLink exists. {item.data.YoutubeLink !== null ? ( <Youtube link={item.data.YoutubeLink} /> ) : ( [ item.data.TwitterLink !== null ? ( <Twitter link={item.data.TwitterLink} /> ) : ( <FeedbackImage link={item.data.SheroesLInk} imageUrl={item.data.Attachments[0].url} /> ), ] )}","title":"Nested conditions in JSX"},{"location":"Gatsby/Basics/Find%20and%20Filter/","text":"Filter const featuredRole = roleData?.filter( roleData => roleData.data.RoleCompanySearch === selectedCompany ) Find ```","title":"Find and Filter"},{"location":"Gatsby/Basics/Find%20and%20Filter/#filter","text":"const featuredRole = roleData?.filter( roleData => roleData.data.RoleCompanySearch === selectedCompany )","title":"Filter"},{"location":"Gatsby/Basics/Find%20and%20Filter/#find","text":"```","title":"Find"},{"location":"Gatsby/Basics/Local%20Storage/","text":"Local Storage","title":"Local Storage"},{"location":"Gatsby/Basics/Loops%20in%20Gatsby/","text":"Using Map function {data.allQuestionsJson.nodes.map(item => ( <div>{item.question}</div> ))} Mapping over a node render={data => ( <div class=\"featured-products\"> {data.allContentfulFeaturedProduct.edges.map(({ node }, i) => ( <div class=\"product\" key={i}> <div>{product}</div> </div> ))} </div> )} Repeat n times const array = [] let i = 0 for (; i < 11; i++) { array.push(i) } In the JSX you can use array {array.map(item => ( <button key={item} onClick={() => handleAnswerOptionClick(item)}> {item} </button> ))}","title":"Loops in Gatsby"},{"location":"Gatsby/Basics/Loops%20in%20Gatsby/#using-map-function","text":"{data.allQuestionsJson.nodes.map(item => ( <div>{item.question}</div> ))}","title":"Using Map function"},{"location":"Gatsby/Basics/Loops%20in%20Gatsby/#mapping-over-a-node","text":"render={data => ( <div class=\"featured-products\"> {data.allContentfulFeaturedProduct.edges.map(({ node }, i) => ( <div class=\"product\" key={i}> <div>{product}</div> </div> ))} </div> )}","title":"Mapping over a node"},{"location":"Gatsby/Basics/Loops%20in%20Gatsby/#repeat-n-times","text":"const array = [] let i = 0 for (; i < 11; i++) { array.push(i) } In the JSX you can use array {array.map(item => ( <button key={item} onClick={() => handleAnswerOptionClick(item)}> {item} </button> ))}","title":"Repeat n times"},{"location":"Gatsby/Basics/New%20Project/","text":"Create a new gatsby project This will create a new gatsby project with the default starter gatsby new Create a gatsby project with a starter of your choice gatsby new gatsby-cafe https://github.com/vedant14/gatsby-starter","title":"New Project"},{"location":"Gatsby/Basics/New%20Project/#create-a-new-gatsby-project","text":"This will create a new gatsby project with the default starter gatsby new","title":"Create a new gatsby project"},{"location":"Gatsby/Basics/New%20Project/#create-a-gatsby-project-with-a-starter-of-your-choice","text":"gatsby new gatsby-cafe https://github.com/vedant14/gatsby-starter","title":"Create a gatsby project with a starter of your choice"},{"location":"Gatsby/Basics/Remote%20Images/","text":"Usage Download images from any string field on another node so that those images can be queried with gatsby-image . Install Plugin npm install gatsby-plugin-remote-images Configure the gatsby config file Configure gatsby-config.js This is cool because I can specify the node type (Book in this case) and also the path to the image and then the gatsby-image plugin will do the magic { resolve: `gatsby-plugin-remote-images`, options: { nodeType: 'Book', imagePath: 'imageUrl', }, },","title":"Remote Images"},{"location":"Gatsby/Basics/Remote%20Images/#usage","text":"Download images from any string field on another node so that those images can be queried with gatsby-image .","title":"Usage"},{"location":"Gatsby/Basics/Remote%20Images/#install-plugin","text":"npm install gatsby-plugin-remote-images","title":"Install Plugin"},{"location":"Gatsby/Basics/Remote%20Images/#configure-the-gatsby-config-file","text":"Configure gatsby-config.js This is cool because I can specify the node type (Book in this case) and also the path to the image and then the gatsby-image plugin will do the magic { resolve: `gatsby-plugin-remote-images`, options: { nodeType: 'Book', imagePath: 'imageUrl', }, },","title":"Configure the gatsby config file"},{"location":"Gatsby/Basics/To%20Read%20Markdown%20files/","text":"Install npm package npm install gatsby-transformer-remark { resolve: `gatsby-transformer-remark`, },","title":"To Read Markdown files"},{"location":"Gatsby/Basics/To%20Read%20Markdown%20files/#install-npm-package","text":"npm install gatsby-transformer-remark { resolve: `gatsby-transformer-remark`, },","title":"Install npm package"},{"location":"Gatsby/Basics/Using%20Dotenv/","text":"We will use Dotenv to pass the api keys or other sensitive information Read more here . Install the plugin from npm npm i dotenv Create the .env file in your source directory This command will create a file in the root of your directory touch .env.development Open it and add your keys in AIRTABLE_API_KEY=heythisisvedantskey Add the following code in your config file In the gatsby-config.js This goes right at the top above the module.exports line too require(\"dotenv\").config({ path: `.env.${process.env.NODE_ENV}`, }) and whereever you want to call the keys you can now use process.env.AIRTABLE_API_KEY Hosting on Netlify When you are hosting on netlify add the environment variables in the same format i.e AIRTABLE_API_KEY=heythisisvedantskey","title":"Using Dotenv"},{"location":"Gatsby/Basics/Using%20Dotenv/#install-the-plugin-from-npm","text":"npm i dotenv","title":"Install the plugin from npm"},{"location":"Gatsby/Basics/Using%20Dotenv/#create-the-env-file-in-your-source-directory","text":"This command will create a file in the root of your directory touch .env.development Open it and add your keys in AIRTABLE_API_KEY=heythisisvedantskey","title":"Create the .env file in your source directory"},{"location":"Gatsby/Basics/Using%20Dotenv/#add-the-following-code-in-your-config-file","text":"In the gatsby-config.js This goes right at the top above the module.exports line too require(\"dotenv\").config({ path: `.env.${process.env.NODE_ENV}`, }) and whereever you want to call the keys you can now use process.env.AIRTABLE_API_KEY","title":"Add the following code in your config file"},{"location":"Gatsby/Basics/Using%20Dotenv/#hosting-on-netlify","text":"When you are hosting on netlify add the environment variables in the same format i.e AIRTABLE_API_KEY=heythisisvedantskey","title":"Hosting on Netlify"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/","text":"Installing firebase and axios Install Firebase npm install firebase Install Axios npm install axios If using firebase with node and browser environment add the following in the gatsby-node.js exports.onCreateWebpackConfig = ({ actions, stage }) => { if (stage === \"develop-html\" || stage === \"build-html\") { actions.setWebpackConfig({ resolve: { mainFields: [\"main\"], }, }) } else { actions.setWebpackConfig({ resolve: { mainFields: [\"browser\", \"module\", \"main\"], }, }) } } Download the template Download the file in this repo Paste it in the components folder Creating config Create the config file touch src/components/Firebase/config.js Add the export option below the file ``` export default firebaseConfig;","title":"1. Installing Firebase"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#installing-firebase-and-axios","text":"","title":"Installing firebase and axios"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#install-firebase","text":"npm install firebase","title":"Install Firebase"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#install-axios","text":"npm install axios","title":"Install Axios"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#if-using-firebase-with-node-and-browser-environment","text":"add the following in the gatsby-node.js exports.onCreateWebpackConfig = ({ actions, stage }) => { if (stage === \"develop-html\" || stage === \"build-html\") { actions.setWebpackConfig({ resolve: { mainFields: [\"main\"], }, }) } else { actions.setWebpackConfig({ resolve: { mainFields: [\"browser\", \"module\", \"main\"], }, }) } }","title":"If using firebase with node and browser environment"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#download-the-template","text":"Download the file in this repo Paste it in the components folder","title":"Download the template"},{"location":"Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#creating-config","text":"Create the config file touch src/components/Firebase/config.js Add the export option below the file ``` export default firebaseConfig;","title":"Creating config"},{"location":"Gatsby/Dynamic%20Data/Firebase/2.%20Adding%20the%20context%20files/","text":"","title":"2. Adding the context files"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/","text":"To setup the supabase Install the package npm install --save @supabase/supabase-js Create the client The location does not matter, I however kept it in the components file touch src/components/supabaseClient.js Inside the supabaseClient.js file import { createClient } from \"@supabase/supabase-js\"; const supabaseUrl = process.env.SUPABASE_URL; const supabaseAnonKey = process.env.SUPABASE_ANON_KEY; export const supabase = createClient(supabaseUrl, supabaseAnonKey); Storing the variables Create the dotenv file touch .env.development Save the keys in the file SUPABASE_ANON_KEY = 'Keygoeshere' SUPABASE_URL = 'https://youruniqueurlgoeshere.supabase.co' Calling the function import React, { useState, useEffect } from \"react\"; import { supabase } from \"../components/supabaseClient\"; const IndexPage = () => { const [brands, setBrands] = useState([]); useEffect(() => { fetchBrands(); }, []); async function fetchBrands() { const { data } = await supabase.from(\"brands\").select(); setBrands(data); console.log(\"data\", data); } return ( <div> {brands.map(brand => ( <div> {brand.id} </div> ))} </div> ) } export default IndexPage;","title":"1. Setup"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/#to-setup-the-supabase","text":"","title":"To setup the supabase"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/#install-the-package","text":"npm install --save @supabase/supabase-js","title":"Install the package"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/#create-the-client","text":"The location does not matter, I however kept it in the components file touch src/components/supabaseClient.js Inside the supabaseClient.js file import { createClient } from \"@supabase/supabase-js\"; const supabaseUrl = process.env.SUPABASE_URL; const supabaseAnonKey = process.env.SUPABASE_ANON_KEY; export const supabase = createClient(supabaseUrl, supabaseAnonKey);","title":"Create the client"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/#storing-the-variables","text":"Create the dotenv file touch .env.development Save the keys in the file SUPABASE_ANON_KEY = 'Keygoeshere' SUPABASE_URL = 'https://youruniqueurlgoeshere.supabase.co'","title":"Storing the variables"},{"location":"Gatsby/Dynamic%20Data/Supabase/1.%20Setup/#calling-the-function","text":"import React, { useState, useEffect } from \"react\"; import { supabase } from \"../components/supabaseClient\"; const IndexPage = () => { const [brands, setBrands] = useState([]); useEffect(() => { fetchBrands(); }, []); async function fetchBrands() { const { data } = await supabase.from(\"brands\").select(); setBrands(data); console.log(\"data\", data); } return ( <div> {brands.map(brand => ( <div> {brand.id} </div> ))} </div> ) } export default IndexPage;","title":"Calling the function"},{"location":"Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/","text":"Usage import React, { useState } from \"react\" import { Button, Form, Modal } from \"react-bootstrap\" export default function SiteVisit({ setSiteFormShow, siteFormShow, projectName, }) { const handleSiteFormClose = () => setSiteFormShow(false) const [name, setName] = useState(\"\") const [email, setEmail] = useState(\"\") const [selectedCategory, setSelectedCategory] = useState(\"\") const [selectedPurpose, setSelectedPurpose] = useState(\"\") const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\") const [selectedDate, setSelectedDate] = useState(\"\") const submitFormData = () => { const formData = { Name: name, Email: email, Category: selectedCategory, Purpose: selectedPurpose, Project: projectName, TimeSlot: selectedTimeSlot, Date: selectedDate, } const Airtable = require(\"airtable\") const base = new Airtable({ apiKey: \"mykey\" }).base( \"mybaseid\" ) //change both the api key and baseid refer <https://airtable.com/api> const table = base(\"Site Visits\") //use you table name inside that base table.create( [ { fields: { Name: name, Email: email, Category: selectedCategory, Purpose: selectedPurpose, Project: projectName, TimeSlot: selectedTimeSlot, Date: selectedDate, }, }, ], function (err, records) { if (err) { console.error(err) } } ) handleSiteFormClose() } return ( <div> <Modal show={siteFormShow} onHide={handleSiteFormClose}> <Modal.Header closeButton> <Modal.Title>Interested in {projectName}</Modal.Title> </Modal.Header> <Modal.Body> <Form noValidate> <Form.Group controlId=\"formBasicText\"> <Form.Label>Please enter your Name</Form.Label> <Form.Control type=\"text\" placeholder=\"Full Name\" value={name} onChange={e => setName(e.target.value)} /> </Form.Group> <Form.Group controlId=\"formBasicEmail\"> <Form.Label>Your email id</Form.Label> <Form.Control type=\"email\" placeholder=\"info@homzhub.com\" value={email} onChange={e => setEmail(e.target.value)} /> <Form.Text className=\"text-muted\"> We'll never share your email with anyone else. </Form.Text> </Form.Group> <Form.Group controlId=\"formBasicDropdown\"> <Form.Label>Choose your configuration</Form.Label> <Form.Control as=\"select\" value={selectedCategory} onChange={e => setSelectedCategory(e.target.value)} > <option> </option> <option>1 BHK</option> <option>2 BHK</option> <option>3 BHK</option> <option>4+ BHK</option> </Form.Control> </Form.Group> <Form.Group controlId=\"formBasicDropdown\"> <Form.Label>Purpose</Form.Label> <Form.Control as=\"select\" value={selectedPurpose} onChange={e => setSelectedPurpose(e.target.value)} > <option> </option> <option>End use</option> <option>Investment</option> </Form.Control> </Form.Group> </Form> </Modal.Body> <Modal.Footer> <Button variant=\"secondary\" onClick={handleSiteFormClose}> Close </Button> <Button variant=\"primary\" onClick={submitFormData}> Submit </Button> </Modal.Footer> </Modal> </div> ) } Create a Node In gatsby-node.js const path = require(`path`) exports.createPages = ({ graphql, actions }) => { const { createPage } = actions return new Promise(async resolve => { const result = await graphql(` { allAirtable(filter: { data: { BoxName: { ne: null } } }) { edges { node { recordId id slug } } } } `) // For each path, create page and choose a template. // values in context Object are available in that page's query result.data.allAirtable.edges.forEach(({ node }) => { createPage({ path: `/${node.slug}`, component: path.resolve(`./src/template/product.js`), context: { RecordID: node.recordId, }, }) }) resolve() }) } in the template post.js import React from \"react\" import { graphql } from \"gatsby\" const ProductPage = ({ data: { airtable: { data }, }, }) => { return ( <div> <h1>{data.BoxAdditional}</h1> </div> ) } export const query = graphql` query ProductPageQuery($RecordID: String!) { airtable(recordId: { eq: $RecordID }) { data { BoxAdditional BoxName } id } } ` export default ProductPage","title":"Form with Airtable as Backend"},{"location":"Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#create-a-node","text":"","title":"Create a Node"},{"location":"Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#in-gatsby-nodejs","text":"const path = require(`path`) exports.createPages = ({ graphql, actions }) => { const { createPage } = actions return new Promise(async resolve => { const result = await graphql(` { allAirtable(filter: { data: { BoxName: { ne: null } } }) { edges { node { recordId id slug } } } } `) // For each path, create page and choose a template. // values in context Object are available in that page's query result.data.allAirtable.edges.forEach(({ node }) => { createPage({ path: `/${node.slug}`, component: path.resolve(`./src/template/product.js`), context: { RecordID: node.recordId, }, }) }) resolve() }) }","title":"In gatsby-node.js"},{"location":"Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#in-the-template-postjs","text":"import React from \"react\" import { graphql } from \"gatsby\" const ProductPage = ({ data: { airtable: { data }, }, }) => { return ( <div> <h1>{data.BoxAdditional}</h1> </div> ) } export const query = graphql` query ProductPageQuery($RecordID: String!) { airtable(recordId: { eq: $RecordID }) { data { BoxAdditional BoxName } id } } ` export default ProductPage","title":"in the template post.js"},{"location":"Gatsby/Importing%20Data/From%20Airtable/","text":"Install the plugin First things first, run the command to install the plugin npm install gatsby-source-airtable Config Use the plugin in the in the gatsby-config.js Ensure that columns in and across the tables have unique names. This method is recommended since the apiKey is not exposed. Read more at dotenv Read more about the options here { resolve: `gatsby-source-airtable`, options: { apiKey: process.env.AIRTABLE_API_KEY, // may instead specify via env, see below tables: [ { baseId: `mybase`, tableName: `Boxes`, mapping: { BoxAttachments: `fileNode`, BoxAdditional: `text/markdown` }, tableLinks: [`BoxItems`], }, ], }, }, Creating Pages from Airtable Records -[ ] Vedant to add Use Airtable for backend of forms Go to Link","title":"From Airtable"},{"location":"Gatsby/Importing%20Data/From%20Airtable/#install-the-plugin","text":"First things first, run the command to install the plugin npm install gatsby-source-airtable","title":"Install the plugin"},{"location":"Gatsby/Importing%20Data/From%20Airtable/#config","text":"Use the plugin in the in the gatsby-config.js Ensure that columns in and across the tables have unique names. This method is recommended since the apiKey is not exposed. Read more at dotenv Read more about the options here { resolve: `gatsby-source-airtable`, options: { apiKey: process.env.AIRTABLE_API_KEY, // may instead specify via env, see below tables: [ { baseId: `mybase`, tableName: `Boxes`, mapping: { BoxAttachments: `fileNode`, BoxAdditional: `text/markdown` }, tableLinks: [`BoxItems`], }, ], }, },","title":"Config"},{"location":"Gatsby/Importing%20Data/From%20Airtable/#creating-pages-from-airtable-records","text":"-[ ] Vedant to add","title":"Creating Pages from Airtable Records"},{"location":"Gatsby/Importing%20Data/From%20Airtable/#use-airtable-for-backend-of-forms","text":"Go to Link","title":"Use Airtable for backend of forms"},{"location":"Gatsby/Importing%20Data/From%20Firebase/","text":"A little more work than the others But free limit is good and is hosted by google. Install the plugin This was recommended on the course. Not sure if there are better plugins npm i gatsby-firesource Get the firebase credentials Go to firebase console Go to Project Settings and then Service accounts Click on \"Generate new private key\", save the key in the src folder. Make sure the file is ignored by git Follow the steps to include this file in gatsby-config.js In the gatsby config Point the credentials to the file you just stored in the previous step. Pay attention to the author___NODE syntax. That is used whenever we can to create a reference field. Read more here - Link { resolve: 'gatsby-firesource', options: { credential: require(\"./firebase.json\"), types: [ { type: 'Book', collection: 'books', map: doc => ({ title: doc.title, isbn: doc.isbn, imageUrl: doc.imageUrl, author___NODE: doc.author.id, }), }, { type: 'Author', collection: 'authors', map: doc => ({ name: doc.name, country: doc.country, books___NODE: doc.books.map(book => book.id), }), }, ], }, }, Creating pages In the node file const path = require(\"path\") exports.createPages = ({ graphql, actions }) => { const { createPage } = actions const bookTemplate = path.resolve(\"src/templates/bookTemplate.js\") return graphql(` { allBook { edges { node { id } } } } `).then(result => { if (result.errors) { throw result.errors } result.data.allBook.edges.forEach(book => { createPage({ path: `/book/${book.node.id}`, component: bookTemplate, context: { bookId: book.node.id }, }) }) }) } In the template file export const query = graphql` query BookQuery($bookId: String!) { book(id: {eq: $bookId}){ summary title localImage{ childImageSharp{ fixed(width: 200){ ...GatsbyImageSharpFixed } } } id author { name } } } `","title":"From Firebase"},{"location":"Gatsby/Importing%20Data/From%20Firebase/#install-the-plugin","text":"This was recommended on the course. Not sure if there are better plugins npm i gatsby-firesource","title":"Install the plugin"},{"location":"Gatsby/Importing%20Data/From%20Firebase/#get-the-firebase-credentials","text":"Go to firebase console Go to Project Settings and then Service accounts Click on \"Generate new private key\", save the key in the src folder. Make sure the file is ignored by git Follow the steps to include this file in gatsby-config.js","title":"Get the firebase credentials"},{"location":"Gatsby/Importing%20Data/From%20Firebase/#in-the-gatsby-config","text":"Point the credentials to the file you just stored in the previous step. Pay attention to the author___NODE syntax. That is used whenever we can to create a reference field. Read more here - Link { resolve: 'gatsby-firesource', options: { credential: require(\"./firebase.json\"), types: [ { type: 'Book', collection: 'books', map: doc => ({ title: doc.title, isbn: doc.isbn, imageUrl: doc.imageUrl, author___NODE: doc.author.id, }), }, { type: 'Author', collection: 'authors', map: doc => ({ name: doc.name, country: doc.country, books___NODE: doc.books.map(book => book.id), }), }, ], }, },","title":"In the gatsby config"},{"location":"Gatsby/Importing%20Data/From%20Firebase/#creating-pages","text":"In the node file const path = require(\"path\") exports.createPages = ({ graphql, actions }) => { const { createPage } = actions const bookTemplate = path.resolve(\"src/templates/bookTemplate.js\") return graphql(` { allBook { edges { node { id } } } } `).then(result => { if (result.errors) { throw result.errors } result.data.allBook.edges.forEach(book => { createPage({ path: `/book/${book.node.id}`, component: bookTemplate, context: { bookId: book.node.id }, }) }) }) } In the template file export const query = graphql` query BookQuery($bookId: String!) { book(id: {eq: $bookId}){ summary title localImage{ childImageSharp{ fixed(width: 200){ ...GatsbyImageSharpFixed } } } id author { name } } } `","title":"Creating pages"},{"location":"Gatsby/Importing%20Data/From%20GraphCMS/","text":"GraphCMS Good free tier Fast build speed Easy UI JSON and other features Install the package npm install gatsby-source-graphcms In the config file Store the endpoint in the .env.development file (read dotenv for more info) For more options see Link { resolve: `gatsby-source-graphcms`, options: { endpoint: process.env.GRAPHCMS_ENDPOINT, // downloadLocalImages: true, }, }, To create pages from graphCMS in the gatsby-node.js file const path = require(\"path\") exports.createPages = async ({ actions: { createPage }, graphql }) => { const { data } = await graphql( ` { pages: allGraphCmsTest( sort: { order: ASC, fields: testquestions___test___publishedAt } ) { nodes { id slug } } } ` ) if (data.errors) throw data.errors data.pages.nodes.forEach(page => { createPage({ component: path.resolve(\"./src/templates/test.js\"), context: { id: page.id, page, }, path: `/tests/${page.slug}`, }) }) } And in the template export const query = graphql` query TestQuest($id: String!) { graphCmsTest(id: { eq: $id }) { slug id title description testquestions { questionString answers trivia { html text } gif { url } } } }","title":"From GraphCMS"},{"location":"Gatsby/Importing%20Data/From%20GraphCMS/#graphcms","text":"Good free tier Fast build speed Easy UI JSON and other features","title":"GraphCMS"},{"location":"Gatsby/Importing%20Data/From%20GraphCMS/#install-the-package","text":"npm install gatsby-source-graphcms","title":"Install the package"},{"location":"Gatsby/Importing%20Data/From%20GraphCMS/#in-the-config-file","text":"Store the endpoint in the .env.development file (read dotenv for more info) For more options see Link { resolve: `gatsby-source-graphcms`, options: { endpoint: process.env.GRAPHCMS_ENDPOINT, // downloadLocalImages: true, }, },","title":"In the config file"},{"location":"Gatsby/Importing%20Data/From%20GraphCMS/#to-create-pages-from-graphcms","text":"in the gatsby-node.js file const path = require(\"path\") exports.createPages = async ({ actions: { createPage }, graphql }) => { const { data } = await graphql( ` { pages: allGraphCmsTest( sort: { order: ASC, fields: testquestions___test___publishedAt } ) { nodes { id slug } } } ` ) if (data.errors) throw data.errors data.pages.nodes.forEach(page => { createPage({ component: path.resolve(\"./src/templates/test.js\"), context: { id: page.id, page, }, path: `/tests/${page.slug}`, }) }) } And in the template export const query = graphql` query TestQuest($id: String!) { graphCmsTest(id: { eq: $id }) { slug id title description testquestions { questionString answers trivia { html text } gif { url } } } }","title":"To create pages from graphCMS"},{"location":"Gatsby/Importing%20Data/From%20Json%20File/","text":"Install Plugin Link to the plugin npm install gatsby-transformer-json In the config file Take note of where your JSON files are stores in this case I created a folder in ./src/data `gatsby-transformer-json`, { resolve: `gatsby-source-filesystem`, options: { path: `./src/data/`, }, }, Example .json file [ { \"question\": \"Something\", \"value\": \"a\", }, { \"question\": \"Something\", \"value\": \"a\", }, { \"question\": \"Something\", \"value\": \"a\", }, ]","title":"From Json File"},{"location":"Gatsby/Importing%20Data/From%20Json%20File/#install-plugin","text":"Link to the plugin npm install gatsby-transformer-json","title":"Install Plugin"},{"location":"Gatsby/Importing%20Data/From%20Json%20File/#in-the-config-file","text":"Take note of where your JSON files are stores in this case I created a folder in ./src/data `gatsby-transformer-json`, { resolve: `gatsby-source-filesystem`, options: { path: `./src/data/`, }, },","title":"In the config file"},{"location":"Gatsby/Importing%20Data/From%20Json%20File/#example-json-file","text":"[ { \"question\": \"Something\", \"value\": \"a\", }, { \"question\": \"Something\", \"value\": \"a\", }, { \"question\": \"Something\", \"value\": \"a\", }, ]","title":"Example .json file"},{"location":"Gatsby/Importing%20Data/From%20YAML%20files/","text":"Works with .yml and .yaml files Install Plugin - Link to the plugin ruby npm install gatsby-transformer-yaml In config file module.exports = { plugins: [ `gatsby-transformer-yaml`, { resolve: `gatsby-source-filesystem`, options: { path: `./src/data/`, }, }, ], }","title":"From YAML files"},{"location":"Gatsby/Importing%20Data/From%20YAML%20files/#install-plugin-","text":"Link to the plugin ruby npm install gatsby-transformer-yaml","title":"Install Plugin -"},{"location":"Gatsby/Importing%20Data/From%20YAML%20files/#in-config-file","text":"module.exports = { plugins: [ `gatsby-transformer-yaml`, { resolve: `gatsby-source-filesystem`, options: { path: `./src/data/`, }, }, ], }","title":"In config file"},{"location":"Gatsby/New%20Project/1.%20Start/","text":"Intialize using npm init gatsby","title":"1. Start"},{"location":"Gatsby/New%20Project/1.%20Start/#intialize-using","text":"npm init gatsby","title":"Intialize using"},{"location":"Gatsby/New%20Project/2.%20New%20Component%20Configurations/","text":"Normally when I create a new component, I configure it this way In the index.js import React from \"react\" import { Wrapper } from \"./styles\" export function Something() { return( <Wrapper> <h1>Something</h1> </Wrapper> ) } In the styles.js import styled from \"styled-components\" import { colors } from \"../../styles/GlobalStyles\" export const Wrapper = styled.div` margin: 30px; `","title":"2. New Component Configurations"},{"location":"Gatsby/React%20Basics/Infinte%20Scroll/","text":"Resources https://www.erichowey.dev/writing/load-more-button-and-infinite-scroll-in-gatsby/ https://scotch.io/tutorials/build-an-infinite-scroll-image-gallery-with-gatsby-and-netlify-functions https://github.com/baobabKoodaa/gatsby-starter-infinite-scroll https://github.com/baobabKoodaa/blog","title":"Infinte Scroll"},{"location":"Gatsby/React%20Basics/Infinte%20Scroll/#resources","text":"https://www.erichowey.dev/writing/load-more-button-and-infinite-scroll-in-gatsby/ https://scotch.io/tutorials/build-an-infinite-scroll-image-gallery-with-gatsby-and-netlify-functions https://github.com/baobabKoodaa/gatsby-starter-infinite-scroll https://github.com/baobabKoodaa/blog","title":"Resources"},{"location":"Gatsby/React%20Basics/Using%20States/","text":"States are very interesting. These are variables in react that can persist just for that session of the browser. Importing state with React import React, { useState } from \"react\" Creating the variables Pay attention to the syntax while naming the variables We set a default also const [selectedRole, setSelectedRole] = useState(null) Changing the variable value setSelectedRole(null)","title":"Using States"},{"location":"Gatsby/React%20Basics/Using%20States/#importing-state-with-react","text":"import React, { useState } from \"react\"","title":"Importing state with React"},{"location":"Gatsby/React%20Basics/Using%20States/#creating-the-variables","text":"Pay attention to the syntax while naming the variables We set a default also const [selectedRole, setSelectedRole] = useState(null)","title":"Creating the variables"},{"location":"Gatsby/React%20Basics/Using%20States/#changing-the-variable-value","text":"setSelectedRole(null)","title":"Changing the variable value"},{"location":"Gatsby/SEO/Creating%20Social%20Cards/","text":"Read more here Link Update SEO component with import React from \"react\" import PropTypes from \"prop-types\" import { Helmet } from \"react-helmet\" import { useStaticQuery, graphql } from \"gatsby\" export function SEO({ description, lang, meta, image: metaImage, title, pathname, }) { const { site } = useStaticQuery( graphql` query { site { siteMetadata { title description author keywords siteUrl } } } ` ) const metaDescription = description || site.siteMetadata.description const image = metaImage && metaImage.src ? `${site.siteMetadata.siteUrl}${metaImage.src}` : null const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null return ( <Helmet htmlAttributes={{ lang, }} title={title} titleTemplate={`%s | ${site.siteMetadata.title}`} link={ canonical ? [ { rel: \"canonical\", href: canonical, }, ] : [] } meta={[ { name: `description`, content: metaDescription, }, { name: \"keywords\", content: site.siteMetadata.keywords.join(\",\"), }, { property: `og:title`, content: title, }, { property: `og:description`, content: metaDescription, }, { property: `og:type`, content: `website`, }, { name: `twitter:creator`, content: site.siteMetadata.author, }, { name: `twitter:title`, content: title, }, { name: `twitter:description`, content: metaDescription, }, ] .concat( metaImage ? [ { property: \"og:image\", content: image, }, { property: \"og:image:width\", content: metaImage.width, }, { property: \"og:image:height\", content: metaImage.height, }, { name: \"twitter:card\", content: \"summary_large_image\", }, ] : [ { name: \"twitter:card\", content: \"summary\", }, ] ) .concat(meta)} /> ) } SEO.defaultProps = { lang: `en`, meta: [], description: ``, } SEO.propTypes = { description: PropTypes.string, lang: PropTypes.string, meta: PropTypes.arrayOf(PropTypes.object), title: PropTypes.string.isRequired, image: PropTypes.shape({ src: PropTypes.string.isRequired, height: PropTypes.number.isRequired, width: PropTypes.number.isRequired, }), pathname: PropTypes.string, } In the page file Focus on the <SEO> tag import React from \"react\" import { Link, graphql } from \"gatsby\" import SEO from \"../components/seo\" class BlogPostTemplate extends React.Component { render() { const post = this.props.data.markdownRemark const siteTitle = this.props.data.site.siteMetadata.title const image = post.frontmatter.image ? post.frontmatter.image.childImageSharp.resize : null return ( <Layout location={this.props.location} title={siteTitle}> <SEO title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt} image={image} pathname={this.props.location.pathname} /> <h1>{post.frontmatter.title}</h1> <div dangerouslySetInnerHTML={{ __html: post.html }} /> </Layout> ) } } export default BlogPostTemplate export const pageQuery = graphql` query BlogPostBySlug($slug: String!) { site { siteMetadata { title author } } markdownRemark(fields: { slug: { eq: $slug } }) { id excerpt(pruneLength: 160) html frontmatter { title description image: featured { childImageSharp { resize(width: 1200) { src height width } } } } } } `","title":"Creating Social Cards"},{"location":"Gatsby/SEO/Creating%20Social%20Cards/#read-more-here","text":"Link","title":"Read more here"},{"location":"Gatsby/SEO/Creating%20Social%20Cards/#update-seo-component-with","text":"import React from \"react\" import PropTypes from \"prop-types\" import { Helmet } from \"react-helmet\" import { useStaticQuery, graphql } from \"gatsby\" export function SEO({ description, lang, meta, image: metaImage, title, pathname, }) { const { site } = useStaticQuery( graphql` query { site { siteMetadata { title description author keywords siteUrl } } } ` ) const metaDescription = description || site.siteMetadata.description const image = metaImage && metaImage.src ? `${site.siteMetadata.siteUrl}${metaImage.src}` : null const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null return ( <Helmet htmlAttributes={{ lang, }} title={title} titleTemplate={`%s | ${site.siteMetadata.title}`} link={ canonical ? [ { rel: \"canonical\", href: canonical, }, ] : [] } meta={[ { name: `description`, content: metaDescription, }, { name: \"keywords\", content: site.siteMetadata.keywords.join(\",\"), }, { property: `og:title`, content: title, }, { property: `og:description`, content: metaDescription, }, { property: `og:type`, content: `website`, }, { name: `twitter:creator`, content: site.siteMetadata.author, }, { name: `twitter:title`, content: title, }, { name: `twitter:description`, content: metaDescription, }, ] .concat( metaImage ? [ { property: \"og:image\", content: image, }, { property: \"og:image:width\", content: metaImage.width, }, { property: \"og:image:height\", content: metaImage.height, }, { name: \"twitter:card\", content: \"summary_large_image\", }, ] : [ { name: \"twitter:card\", content: \"summary\", }, ] ) .concat(meta)} /> ) } SEO.defaultProps = { lang: `en`, meta: [], description: ``, } SEO.propTypes = { description: PropTypes.string, lang: PropTypes.string, meta: PropTypes.arrayOf(PropTypes.object), title: PropTypes.string.isRequired, image: PropTypes.shape({ src: PropTypes.string.isRequired, height: PropTypes.number.isRequired, width: PropTypes.number.isRequired, }), pathname: PropTypes.string, }","title":"Update SEO component with"},{"location":"Gatsby/SEO/Creating%20Social%20Cards/#in-the-page-file","text":"Focus on the <SEO> tag import React from \"react\" import { Link, graphql } from \"gatsby\" import SEO from \"../components/seo\" class BlogPostTemplate extends React.Component { render() { const post = this.props.data.markdownRemark const siteTitle = this.props.data.site.siteMetadata.title const image = post.frontmatter.image ? post.frontmatter.image.childImageSharp.resize : null return ( <Layout location={this.props.location} title={siteTitle}> <SEO title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt} image={image} pathname={this.props.location.pathname} /> <h1>{post.frontmatter.title}</h1> <div dangerouslySetInnerHTML={{ __html: post.html }} /> </Layout> ) } } export default BlogPostTemplate export const pageQuery = graphql` query BlogPostBySlug($slug: String!) { site { siteMetadata { title author } } markdownRemark(fields: { slug: { eq: $slug } }) { id excerpt(pruneLength: 160) html frontmatter { title description image: featured { childImageSharp { resize(width: 1200) { src height width } } } } } } `","title":"In the page file"},{"location":"Gatsby/Search/Local%20Search/","text":"Install the plugin Link for the documentation here npm install --save gatsby-plugin-local-search Creating the index I used it to index data from my airtable so the code for gatsby-config.js is { resolve: \"gatsby-plugin-local-search\", options: { // A unique name for the search index. This should be descriptive of // what the index contains. This is required. name: \"brands\", // Set the search engine to create the index. This is required. // The following engines are supported: flexsearch, lunr engine: \"flexsearch\", // Provide options to the engine. This is optional and only recommended // for advanced users. // // Note: Only the flexsearch engine supports options. engineOptions: \"speed\", // GraphQL query used to fetch all data for the search index. This is // required. query: ` { allAirtable(filter: {table: {eq: \"Brands\"}}) { nodes { id data { CategorySearchName Name Description slug CategoryDisplayName Image { localFiles { publicURL } } } } } } `, // Field used as the reference value for each document. // Default: 'id'. ref: \"id\", // List of keys to index. The values of the keys are taken from the // normalizer function below. // Default: all fields index: [\"Name\", \"CategoryID\"], // List of keys to store and make available in your UI. The values of // the keys are taken from the normalizer function below. // Default: all fields store: [ \"id\", \"Name\", \"CategoryID\", \"Category\", \"path\", \"Description\", \"Image\", ], // Function used to map the result from the GraphQL query. This should // return an array of items to index in the form of flat objects // containing properties to index. The objects must contain the // field above (default: 'id'). This is required. normalizer: ({ data }) => data.allAirtable.nodes.map(node => ({ id: node.id, path: node.data.slug, Name: node.data.Name, CategoryID: node.data.CategorySearchName, Description: node.data.Description, Category: node.data.CategoryDisplayName, Image: node.data.Image, })), }, },","title":"Local Search"},{"location":"Gatsby/Search/Local%20Search/#install-the-plugin","text":"Link for the documentation here npm install --save gatsby-plugin-local-search","title":"Install the plugin"},{"location":"Gatsby/Search/Local%20Search/#creating-the-index","text":"I used it to index data from my airtable so the code for gatsby-config.js is { resolve: \"gatsby-plugin-local-search\", options: { // A unique name for the search index. This should be descriptive of // what the index contains. This is required. name: \"brands\", // Set the search engine to create the index. This is required. // The following engines are supported: flexsearch, lunr engine: \"flexsearch\", // Provide options to the engine. This is optional and only recommended // for advanced users. // // Note: Only the flexsearch engine supports options. engineOptions: \"speed\", // GraphQL query used to fetch all data for the search index. This is // required. query: ` { allAirtable(filter: {table: {eq: \"Brands\"}}) { nodes { id data { CategorySearchName Name Description slug CategoryDisplayName Image { localFiles { publicURL } } } } } } `, // Field used as the reference value for each document. // Default: 'id'. ref: \"id\", // List of keys to index. The values of the keys are taken from the // normalizer function below. // Default: all fields index: [\"Name\", \"CategoryID\"], // List of keys to store and make available in your UI. The values of // the keys are taken from the normalizer function below. // Default: all fields store: [ \"id\", \"Name\", \"CategoryID\", \"Category\", \"path\", \"Description\", \"Image\", ], // Function used to map the result from the GraphQL query. This should // return an array of items to index in the form of flat objects // containing properties to index. The objects must contain the // field above (default: 'id'). This is required. normalizer: ({ data }) => data.allAirtable.nodes.map(node => ({ id: node.id, path: node.data.slug, Name: node.data.Name, CategoryID: node.data.CategorySearchName, Description: node.data.Description, Category: node.data.CategoryDisplayName, Image: node.data.Image, })), }, },","title":"Creating the index"},{"location":"Github/","text":"My Github notes I use github as my default git versioning system. In fact, I suspect like most devs, I haven't even used any other version control systems.","title":"My Github notes"},{"location":"Github/#my-github-notes","text":"I use github as my default git versioning system. In fact, I suspect like most devs, I haven't even used any other version control systems.","title":"My Github notes"},{"location":"Github/Common%20commands%20I%20use/","text":"Initialise a git repo This will create a git repo inside the directory you are currently in. git init Create a branch from master From master meaning, the new branch that will be created will at first be identical to master You need to run git push after this so that these changes are reflected in github too. git checkout -b new-model Check the branches created for a particular repo If you want to find what are the various branches in an existing repo, then use this command. git branch Checkout to an existing branch git checkout <branchname> Git commit message ammend git commit --amend -m\"Bug fix for the head tag\"","title":"Common commands I use"},{"location":"Github/Common%20commands%20I%20use/#initialise-a-git-repo","text":"This will create a git repo inside the directory you are currently in. git init","title":"Initialise a git repo"},{"location":"Github/Common%20commands%20I%20use/#create-a-branch-from-master","text":"From master meaning, the new branch that will be created will at first be identical to master You need to run git push after this so that these changes are reflected in github too. git checkout -b new-model","title":"Create a branch from master"},{"location":"Github/Common%20commands%20I%20use/#check-the-branches-created-for-a-particular-repo","text":"If you want to find what are the various branches in an existing repo, then use this command. git branch","title":"Check the branches created for a particular repo"},{"location":"Github/Common%20commands%20I%20use/#checkout-to-an-existing-branch","text":"git checkout <branchname>","title":"Checkout to an existing branch"},{"location":"Github/Common%20commands%20I%20use/#git-commit-message-ammend","text":"git commit --amend -m\"Bug fix for the head tag\"","title":"Git commit message ammend"},{"location":"Jekyll/","text":"My Jekyll notes Jekyll is a static site generator. When I came across jekyll it opened my mind to the possibility of hosting a site for free. And the amazing possibility of staticly generated sites Jekyll is pretty easy to wrap your head around. It took me probably less than a day to understand it.","title":"My Jekyll notes"},{"location":"Jekyll/#my-jekyll-notes","text":"Jekyll is a static site generator. When I came across jekyll it opened my mind to the possibility of hosting a site for free. And the amazing possibility of staticly generated sites Jekyll is pretty easy to wrap your head around. It took me probably less than a day to understand it.","title":"My Jekyll notes"},{"location":"Jekyll/New%20Jekyll%20project/","text":"Start a server bundle exec jekyll serve --livereload","title":"New Jekyll project"},{"location":"Jekyll/New%20Jekyll%20project/#start-a-server","text":"bundle exec jekyll serve --livereload","title":"Start a server"},{"location":"NextJs/","text":"I started using NextJs because there were some limitations on Gatsby, especially when using Supabase to add authentication. I am sure there are workaround that but I do not know enough node to do that, probably. Anyway, nextjs is really amazing. Very similar to gatsby","title":"Index"},{"location":"Ruby-On-Rails/","text":"My Ruby on rails Notes Introduction These are my ruby on rails code/notes. My Coding Journey I started with Ruby on rails in early 2019, I suppose. I bought a course on udemy and that was the start. Learning to code was always a deep desire for me but at the same time very daunting. Where do you start, what language to pick up. A friend suggest RoR and I've been with it ever since. It is not a bad place for begineers to start.","title":"My Ruby on rails Notes"},{"location":"Ruby-On-Rails/#my-ruby-on-rails-notes","text":"","title":"My Ruby on rails Notes"},{"location":"Ruby-On-Rails/#introduction","text":"These are my ruby on rails code/notes.","title":"Introduction"},{"location":"Ruby-On-Rails/#my-coding-journey","text":"I started with Ruby on rails in early 2019, I suppose. I bought a course on udemy and that was the start. Learning to code was always a deep desire for me but at the same time very daunting. Where do you start, what language to pick up. A friend suggest RoR and I've been with it ever since. It is not a bad place for begineers to start.","title":"My Coding Journey"},{"location":"Ruby-On-Rails/Authorisations/","text":"Authorisation in Rails 'Authorisation' simply means giving role based access to certain users. Read Pundit","title":"Authorisation in Rails"},{"location":"Ruby-On-Rails/Authorisations/#authorisation-in-rails","text":"'Authorisation' simply means giving role based access to certain users. Read Pundit","title":"Authorisation in Rails"},{"location":"Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/","text":"Create a new policy file Video - Suppose the model name is meeting touch app/policies/meeting_policy.rb The file should inherit from the ApplicationPolicy In the meeting_policy.rb class MeetingPolicy < ApplicationPolicy def index?# => true end end Editing your controllers In your meetings_controller.rb add the authoize @meetings to the function you want to protect def index @meetings = Meeting.all authorize @meetings end If you want to make authorisation required as the default you can add after_action :verify_authorized Alternatives after_action :verify_authorized, only: [:show, :edit ] after_action :verify_authorized, except: [:new, :create] This would mean that the user will be redirected to login everytime they try to open a protected link after_action :verify_authorized, unless: :devise_controller? Rescue from Pandit This goes in application_controller.rb rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized protected def user_not_authorized flash[:alert] = \"You are not authorized to access this page.\" redirect_to(request.referrer || root_path) end","title":"Creating a new Policy"},{"location":"Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#create-a-new-policy-file","text":"Video - Suppose the model name is meeting touch app/policies/meeting_policy.rb The file should inherit from the ApplicationPolicy In the meeting_policy.rb class MeetingPolicy < ApplicationPolicy def index?# => true end end","title":"Create a new policy file"},{"location":"Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#editing-your-controllers","text":"In your meetings_controller.rb add the authoize @meetings to the function you want to protect def index @meetings = Meeting.all authorize @meetings end If you want to make authorisation required as the default you can add after_action :verify_authorized Alternatives after_action :verify_authorized, only: [:show, :edit ] after_action :verify_authorized, except: [:new, :create] This would mean that the user will be redirected to login everytime they try to open a protected link after_action :verify_authorized, unless: :devise_controller?","title":"Editing your controllers"},{"location":"Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#rescue-from-pandit","text":"This goes in application_controller.rb rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized protected def user_not_authorized flash[:alert] = \"You are not authorized to access this page.\" redirect_to(request.referrer || root_path) end","title":"Rescue from Pandit"},{"location":"Ruby-On-Rails/Authorisations/Pundit/","text":"Pundit is what I use for Authorisations in rails CanCan is another alternative which I belive is more popular. Install the Pundit Gem Get the latest version of the gem from rubygems gem 'pundit', '~> 2.1' Generate the Policies Policies is the term Pundit uses for policy management. Running this command will create your first policy in app/policies/application_policy.rb rails g pundit:install Including in Application Controller Add the following line in application_controller.rb include Pundit See Creating a new policy next","title":"Pundit"},{"location":"Ruby-On-Rails/Authorisations/Pundit/#install-the-pundit-gem","text":"Get the latest version of the gem from rubygems gem 'pundit', '~> 2.1'","title":"Install the Pundit Gem"},{"location":"Ruby-On-Rails/Authorisations/Pundit/#generate-the-policies","text":"Policies is the term Pundit uses for policy management. Running this command will create your first policy in app/policies/application_policy.rb rails g pundit:install","title":"Generate the Policies"},{"location":"Ruby-On-Rails/Authorisations/Pundit/#including-in-application-controller","text":"Add the following line in application_controller.rb include Pundit See Creating a new policy next","title":"Including in Application Controller"},{"location":"Ruby-On-Rails/Basics/Database%20Change/","text":"rails db:system:change --to=postgresql rails db:system:change --to=mysql rails db:system:change --to=sqlite3 rails db:system:change --to=oracle rails db:system:change --to=frontbase rails db:system:change --to=sqlserver rails db:system:change --to=jdbc","title":"Database Change"},{"location":"Ruby-On-Rails/Basics/Devise/","text":"Sign a user in programmatically Via the controller mostly sign_in User.first Checking if a user is signed in user_signed_in? Get the logged in user current_user Update the password in rails console ```","title":"Devise"},{"location":"Ruby-On-Rails/Basics/Devise/#sign-a-user-in-programmatically","text":"Via the controller mostly sign_in User.first","title":"Sign a user in programmatically"},{"location":"Ruby-On-Rails/Basics/Devise/#checking-if-a-user-is-signed-in","text":"user_signed_in?","title":"Checking if a user is signed in"},{"location":"Ruby-On-Rails/Basics/Devise/#get-the-logged-in-user","text":"current_user","title":"Get the logged in user"},{"location":"Ruby-On-Rails/Basics/Devise/#update-the-password","text":"in rails console ```","title":"Update the password"},{"location":"Ruby-On-Rails/Basics/Encrypted%20Credentials/","text":"Open the credentials file rails credentials:edit Format for the credentials file production: slack: app_id: APPID client_id: CLIENT_ID client_secret: CLIENT_SECRET verification_token: VERIFICATION_TOKEN signing_secret: SIGNING_SECRET development: slack: app_id: APPID client_id: CLIENT_ID client_secret: CLIENT_SECRET verification_token: VERIFICATION_TOKEN signing_secret: SIGNING_SECRET sendgrid_api_key: SENDGRID_API_KEY # Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies. secret_key_base: AUTOGENERATED CODE Calling the Credentials Rails.application.credentials[Rails.env.to_sym][:slack][:signing_secret] Rails.application.credentials[:supa][:apikey]","title":"Encrypted Credentials"},{"location":"Ruby-On-Rails/Basics/Encrypted%20Credentials/#open-the-credentials-file","text":"rails credentials:edit","title":"Open the credentials file"},{"location":"Ruby-On-Rails/Basics/Encrypted%20Credentials/#format-for-the-credentials-file","text":"production: slack: app_id: APPID client_id: CLIENT_ID client_secret: CLIENT_SECRET verification_token: VERIFICATION_TOKEN signing_secret: SIGNING_SECRET development: slack: app_id: APPID client_id: CLIENT_ID client_secret: CLIENT_SECRET verification_token: VERIFICATION_TOKEN signing_secret: SIGNING_SECRET sendgrid_api_key: SENDGRID_API_KEY # Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies. secret_key_base: AUTOGENERATED CODE","title":"Format for the credentials file"},{"location":"Ruby-On-Rails/Basics/Encrypted%20Credentials/#calling-the-credentials","text":"Rails.application.credentials[Rails.env.to_sym][:slack][:signing_secret] Rails.application.credentials[:supa][:apikey]","title":"Calling the Credentials"},{"location":"Ruby-On-Rails/Basics/Migrations/","text":"Change a column datatype Using def up and def down is necessary if you want to do a migration rollback def up change_column :projects, :deadline, :oldname end def down change_column :projects, :deadline, :date end Add a column def up add_column :accounts, :ssl_enabled, :boolean, default: true end def down remove_column :accounts, :ssl_enabledc end Rename a column def change rename_column :users, :email, :email_address end Add foreign-key references Suppose posts should belong to users rails g migration AddUserRefToProducts user:references This adds class AddUserRefToProducts < ActiveRecord::Migration def up add_reference :creatives, :user, null: false, foreign_key: true end def down remove_reference :creatives, :user, null: false, foreign_key: true end end Add Foreign Key references with different name Suppose you want to reference user table but by the name scribe One Scribe has many meetings add_reference :meetings, :scribe, index: true, foreign_key: { to_table: :users }, null: false Then in the model files user.rb class User < ApplicationRecord has_many :meetings, :foreign_key => \"scribe_id\" end In the meeting.rb file belongs_to :scribe, class_name: \"User\" New Table class CreatePromotionRuleStores < ActiveRecord::Migration[5.1] def change create_table :spree_promotion_rules_stores do |t| t.references :store, null: false t.references :promotion_rule, null: false t.timestamps end end end Rails db:rollback Replace 1 with however number of steps you want to rollback Use with caution because, you will need to rollback the prod db as well Heroku pg does not offer rollback facility in the free plan. You will have to drop the db if this is used on heroku once it was migrated. rake db:rollback STEP=1","title":"Migrations"},{"location":"Ruby-On-Rails/Basics/Migrations/#change-a-column-datatype","text":"Using def up and def down is necessary if you want to do a migration rollback def up change_column :projects, :deadline, :oldname end def down change_column :projects, :deadline, :date end","title":"Change a column datatype"},{"location":"Ruby-On-Rails/Basics/Migrations/#add-a-column","text":"def up add_column :accounts, :ssl_enabled, :boolean, default: true end def down remove_column :accounts, :ssl_enabledc end","title":"Add a column"},{"location":"Ruby-On-Rails/Basics/Migrations/#rename-a-column","text":"def change rename_column :users, :email, :email_address end","title":"Rename a column"},{"location":"Ruby-On-Rails/Basics/Migrations/#add-foreign-key-references","text":"Suppose posts should belong to users rails g migration AddUserRefToProducts user:references This adds class AddUserRefToProducts < ActiveRecord::Migration def up add_reference :creatives, :user, null: false, foreign_key: true end def down remove_reference :creatives, :user, null: false, foreign_key: true end end","title":"Add foreign-key references"},{"location":"Ruby-On-Rails/Basics/Migrations/#add-foreign-key-references-with-different-name","text":"Suppose you want to reference user table but by the name scribe One Scribe has many meetings add_reference :meetings, :scribe, index: true, foreign_key: { to_table: :users }, null: false Then in the model files user.rb class User < ApplicationRecord has_many :meetings, :foreign_key => \"scribe_id\" end In the meeting.rb file belongs_to :scribe, class_name: \"User\"","title":"Add Foreign Key references with different name"},{"location":"Ruby-On-Rails/Basics/Migrations/#new-table","text":"class CreatePromotionRuleStores < ActiveRecord::Migration[5.1] def change create_table :spree_promotion_rules_stores do |t| t.references :store, null: false t.references :promotion_rule, null: false t.timestamps end end end","title":"New Table"},{"location":"Ruby-On-Rails/Basics/Migrations/#rails-dbrollback","text":"Replace 1 with however number of steps you want to rollback Use with caution because, you will need to rollback the prod db as well Heroku pg does not offer rollback facility in the free plan. You will have to drop the db if this is used on heroku once it was migrated. rake db:rollback STEP=1","title":"Rails db:rollback"},{"location":"Ruby-On-Rails/Basics/New%20Rails%20App/","text":"Create a new rails application The database selected by default is mysql. For deploying the app on heroku it is essential to use postgresql rails new slack_bot -T --database=postgresql App with a different version of rails You will need to install the specific version of rails before hand - gem install rails -v 5.2.3 rails _5.2.3_ new new_app_name --database=postgresql Create and migrate the database These commands will create and migrate a rails data base rails db:create rails db:migrate","title":"New Rails App"},{"location":"Ruby-On-Rails/Basics/New%20Rails%20App/#create-a-new-rails-application","text":"The database selected by default is mysql. For deploying the app on heroku it is essential to use postgresql rails new slack_bot -T --database=postgresql","title":"Create a new rails application"},{"location":"Ruby-On-Rails/Basics/New%20Rails%20App/#app-with-a-different-version-of-rails","text":"You will need to install the specific version of rails before hand - gem install rails -v 5.2.3 rails _5.2.3_ new new_app_name --database=postgresql","title":"App with a different version of rails"},{"location":"Ruby-On-Rails/Basics/New%20Rails%20App/#create-and-migrate-the-database","text":"These commands will create and migrate a rails data base rails db:create rails db:migrate","title":"Create and migrate the database"},{"location":"Ruby-On-Rails/Search/search/","text":"search.md Ave name = \"independent_action_item:independent_action_item\" name_vedant = name.gsub(/:(\\d+)/,'').strip puts name_vedant","title":"Search"},{"location":"Ruby-On-Rails/Slack-Bot/","text":"Making a slack bot with Rails I am trying to create a slack bot with rails. This is my way to earn a side-income by building a micro-saas.","title":"Making a slack bot with Rails"},{"location":"Ruby-On-Rails/Slack-Bot/#making-a-slack-bot-with-rails","text":"I am trying to create a slack bot with rails. This is my way to earn a side-income by building a micro-saas.","title":"Making a slack bot with Rails"},{"location":"Shopify/","text":"Creating a new shopify app. With the CLI Although I did not want to start with CLI, that is what is recommended in their docs and I will later figure out how to do it other wise.","title":"Index"},{"location":"Shopify/#with-the-cli","text":"Although I did not want to start with CLI, that is what is recommended in their docs and I will later figure out how to do it other wise.","title":"With the CLI"},{"location":"Shopify/Links/","text":"Getting Started Graphql","title":"Links"},{"location":"Strapi/","text":"My Strapi Notes Strapi is a headless CMS tool It is also open source. I am interested in figuring out the best way to use it with Gatsby to create sites Strapi documentation","title":"My Strapi Notes"},{"location":"Strapi/#my-strapi-notes","text":"Strapi is a headless CMS tool It is also open source. I am interested in figuring out the best way to use it with Gatsby to create sites Strapi documentation","title":"My Strapi Notes"},{"location":"Strapi/Common%20command%20I%20use/","text":"Strapi admin password reset npm run strapi admin:reset-user-password","title":"Common command I use"},{"location":"Strapi/Common%20command%20I%20use/#strapi-admin-password-reset","text":"npm run strapi admin:reset-user-password","title":"Strapi admin password reset"},{"location":"Strapi/New%20Project/","text":"Create a Strapi Project npx create-strapi-app my-project Strapi app quickstart Quickstart uses the default database (SQLite) npx create-strapi-app my-project --quickstart Running Strapi To start the Strapi application, run the following command in the project folder: If you are running this for the first time, it will open signup for admin form npm run develop","title":"New Project"},{"location":"Strapi/New%20Project/#create-a-strapi-project","text":"npx create-strapi-app my-project","title":"Create a Strapi Project"},{"location":"Strapi/New%20Project/#strapi-app-quickstart","text":"Quickstart uses the default database (SQLite) npx create-strapi-app my-project --quickstart","title":"Strapi app quickstart"},{"location":"Strapi/New%20Project/#running-strapi","text":"To start the Strapi application, run the following command in the project folder: If you are running this for the first time, it will open signup for admin form npm run develop","title":"Running Strapi"}]}