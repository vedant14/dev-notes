{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<ul> <li>These were created using mkdocs.</li> <li>And created with the intention of making my dev notes easily accessible for \"ME\".</li> <li>Having them hosted on a public server is just a happy co-incidence.</li> </ul>"},{"location":"#organisation","title":"Organisation","text":"<ul> <li>On a high level, each different coding tool has a seperate folder.</li> <li>All folders will have a sub-sections and so on.</li> <li>This is all done for my benefit and understanding and not to make the site easily readable.</li> </ul>"},{"location":"#free-to-use","title":"Free-to-use","text":"<ul> <li>You are free to use any code snippet from here for your own benefit, without attributing any credit to me.</li> </ul>"},{"location":"#public","title":"Public","text":"<ul> <li>Since this is hosted on github pages, this is a public repo. There is no other reason.</li> <li>I was not interested in creating a open source project.</li> <li>I am not inclined to maintain this repo for anyone else's benefit other than mine. So please do not create any issues or request any features.</li> </ul>"},{"location":"Backend/Ruby-On-Rails/","title":"My Ruby on rails Notes","text":""},{"location":"Backend/Ruby-On-Rails/#introduction","title":"Introduction","text":"<ul> <li>These are my ruby on rails code/notes.</li> </ul>"},{"location":"Backend/Ruby-On-Rails/#my-coding-journey","title":"My Coding Journey","text":"<ul> <li>I started with Ruby on rails in early 2019, I suppose.</li> <li>I bought a course on udemy and that was the start.</li> <li>Learning to code was always a deep desire for me but at the same time very daunting.</li> <li>Where do you start, what language to pick up.</li> <li>~~A friend suggest RoR and I've been with it ever since. It is not a bad place for begineers to start.~~ No more, moved to NextJS - again on a friend's recommendation.</li> </ul>"},{"location":"Backend/Ruby-On-Rails/Authorisations/","title":"Authorisation in Rails","text":"<ul> <li>'Authorisation' simply means giving role based access to certain users.</li> </ul>","tags":["Ruby-on-rails","Auth"]},{"location":"Backend/Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/","title":"Creating a new Policy","text":""},{"location":"Backend/Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#create-a-new-policy-file","title":"Create a new policy file","text":"<p>Video - Suppose the model name is meeting</p> <pre><code>touch app/policies/meeting_policy.rb\n</code></pre> <ul> <li>The file should inherit from the <code>ApplicationPolicy</code></li> <li>In the <code>meeting_policy.rb</code></li> </ul> <pre><code>class MeetingPolicy &lt; ApplicationPolicy\n    def index?# =&gt; \n        true\n    end\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#editing-your-controllers","title":"Editing your controllers","text":"<ul> <li>In your <code>meetings_controller.rb</code> add the <code>authoize @meetings</code> to the function you want to protect</li> </ul> <pre><code>  def index\n    @meetings = Meeting.all\n    authorize @meetings\n  end\n</code></pre> <ul> <li>If you want to make authorisation required as the default you can add</li> </ul> <pre><code>after_action :verify_authorized \n</code></pre> <ul> <li>Alternatives</li> </ul> <pre><code>after_action :verify_authorized, only: [:show, :edit ]\nafter_action :verify_authorized, except: [:new, :create]\n</code></pre> <ul> <li>This would mean that the user will be redirected to login everytime they try to open a protected link</li> </ul> <pre><code>after_action :verify_authorized, unless: :devise_controller?\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Creating%20a%20new%20Policy/#rescue-from-pandit","title":"Rescue from Pandit","text":"<ul> <li>This goes in <code>application_controller.rb</code></li> </ul> <pre><code>rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized\nprotected\n\ndef user_not_authorized\n    flash[:alert] = \"You are not authorized to access this page.\"\n    redirect_to(request.referrer || root_path)\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Pundit/","title":"Pundit","text":"<ul> <li>Pundit is what I use for Authorisations in rails </li> <li>CanCan is another alternative which I belive is more popular. </li> </ul>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Pundit/#install-the-pundit-gem","title":"Install the Pundit Gem","text":"<ul> <li>Get the latest version of the gem from rubygems</li> </ul> <pre><code>gem 'pundit', '~&gt; 2.1'\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Pundit/#generate-the-policies","title":"Generate the Policies","text":"<ul> <li>Policies is the term Pundit uses for policy management. </li> <li>Running this command will create your first policy in <code>app/policies/application_policy.rb</code></li> </ul> <pre><code>rails g pundit:install\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Authorisations/Pundit/#including-in-application-controller","title":"Including in Application Controller","text":"<ul> <li>Add the following line in <code>application_controller.rb</code></li> </ul> <pre><code>include Pundit\n</code></pre> <ul> <li>See Creating a new policy next</li> </ul>"},{"location":"Backend/Ruby-On-Rails/Basics/Database%20Change/","title":"Database Change","text":"<pre><code>rails db:system:change --to=postgresql\nrails db:system:change --to=mysql\nrails db:system:change --to=sqlite3\nrails db:system:change --to=oracle\nrails db:system:change --to=frontbase\nrails db:system:change --to=sqlserver\nrails db:system:change --to=jdbc\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Devise/","title":"Devise","text":""},{"location":"Backend/Ruby-On-Rails/Basics/Devise/#sign-a-user-in-programmatically","title":"Sign a user in programmatically","text":"<ul> <li>Via the controller mostly</li> </ul> <pre><code>sign_in User.first\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Devise/#checking-if-a-user-is-signed-in","title":"Checking if a user is signed in","text":"<pre><code>user_signed_in?\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Devise/#get-the-logged-in-user","title":"Get the logged in user","text":"<pre><code>current_user\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Devise/#update-the-password","title":"Update the password","text":"<ul> <li>in rails console ```</li> </ul>"},{"location":"Backend/Ruby-On-Rails/Basics/Encrypted%20Credentials/","title":"Encrypted Credentials","text":""},{"location":"Backend/Ruby-On-Rails/Basics/Encrypted%20Credentials/#open-the-credentials-file","title":"Open the credentials file","text":"<pre><code>rails credentials:edit\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Encrypted%20Credentials/#format-for-the-credentials-file","title":"Format for the credentials file","text":"<pre><code>production:\n  slack:\n    app_id: APPID\n    client_id: CLIENT_ID\n    client_secret: CLIENT_SECRET\n    verification_token: VERIFICATION_TOKEN\n    signing_secret: SIGNING_SECRET\n\ndevelopment:\n  slack:\n    app_id: APPID\n    client_id: CLIENT_ID\n    client_secret: CLIENT_SECRET\n    verification_token: VERIFICATION_TOKEN\n    signing_secret: SIGNING_SECRET\n\nsendgrid_api_key: SENDGRID_API_KEY\n\n# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.\nsecret_key_base: AUTOGENERATED CODE\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Encrypted%20Credentials/#calling-the-credentials","title":"Calling the Credentials","text":"<pre><code>Rails.application.credentials[Rails.env.to_sym][:slack][:signing_secret]\n</code></pre> <pre><code>Rails.application.credentials[:supa][:apikey]\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/","title":"Migrations","text":""},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#change-a-column-datatype","title":"Change a column datatype","text":"<ul> <li>Using <code>def up</code> and <code>def down</code> is necessary if you want to do a migration rollback</li> </ul> <pre><code>def up\n    change_column :projects, :deadline, :oldname\nend\ndef down\n    change_column :projects, :deadline, :date\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#add-a-column","title":"Add a column","text":"<pre><code>def up\n    add_column :accounts, :ssl_enabled, :boolean, default: true\nend\n\ndef down\n    remove_column :accounts, :ssl_enabledc\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#rename-a-column","title":"Rename a column","text":"<pre><code>def change\n    rename_column :users, :email, :email_address\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#add-foreign-key-references","title":"Add foreign-key references","text":"<ul> <li>Suppose posts should belong to users </li> </ul> <pre><code>rails g migration AddUserRefToProducts user:references\n</code></pre> <ul> <li>This adds </li> </ul> <pre><code>class AddUserRefToProducts &lt; ActiveRecord::Migration\n    def up\n        add_reference :creatives, :user, null: false, foreign_key: true\n    end\n    def down\n        remove_reference :creatives, :user, null: false, foreign_key: true\n    end\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#add-foreign-key-references-with-different-name","title":"Add Foreign Key references with different name","text":"<ul> <li>Suppose you want to reference user table but by the name <code>scribe</code></li> <li><code>One Scribe has many meetings</code></li> </ul> <pre><code>    add_reference :meetings, :scribe, index: true, foreign_key: { to_table: :users }, null: false\n</code></pre> <ul> <li>Then in the model files <code>user.rb</code></li> </ul> <pre><code>class User &lt; ApplicationRecord\n    has_many :meetings, :foreign_key =&gt; \"scribe_id\"\nend\n</code></pre> <ul> <li>In the <code>meeting.rb</code> file</li> </ul> <pre><code>belongs_to :scribe, class_name: \"User\"\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#new-table","title":"New Table","text":"<pre><code>\nclass CreatePromotionRuleStores &lt; ActiveRecord::Migration[5.1]\n  def change\n    create_table :spree_promotion_rules_stores do |t|\n      t.references :store, null: false\n      t.references :promotion_rule, null: false\n\n      t.timestamps\n    end\n  end\nend\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/Migrations/#rails-dbrollback","title":"Rails db:rollback","text":"<ol> <li>Replace 1 with however number of steps you want to rollback</li> <li>Use with caution because, you will need to rollback the prod db as well </li> <li>Heroku pg does not offer rollback facility in the free plan. You will have to drop the db if this is used on heroku once it was migrated.</li> </ol> <pre><code>rake db:rollback STEP=1\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/New%20Rails%20App/","title":"New Rails App","text":""},{"location":"Backend/Ruby-On-Rails/Basics/New%20Rails%20App/#create-a-new-rails-application","title":"Create a new rails application","text":"<ul> <li>The database selected by default is mysql.</li> <li>For deploying the app on heroku it is essential to use postgresql</li> </ul> <pre><code>rails new slack_bot -T --database=postgresql \n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/New%20Rails%20App/#app-with-a-different-version-of-rails","title":"App with a different version of rails","text":"<ul> <li>You will need to install the specific version of rails before hand - <code>gem install rails -v 5.2.3</code></li> </ul> <pre><code>rails _5.2.3_ new new_app_name --database=postgresql\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Basics/New%20Rails%20App/#create-and-migrate-the-database","title":"Create and migrate the database","text":"<ul> <li>These commands will create and migrate a rails data base</li> </ul> <pre><code>rails db:create\nrails db:migrate\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Search/search/","title":"Search","text":"<p>search.md</p> <p>Ave</p> <pre><code>    name = \"independent_action_item:independent_action_item\"\n\n    name_vedant = name.gsub(/:(\\d+)/,'').strip\n\n    puts name_vedant\n\n\n</code></pre>"},{"location":"Backend/Ruby-On-Rails/Slack-Bot/","title":"Making a slack bot with Rails","text":"<ul> <li>I am trying to create a slack bot with rails. </li> <li>This is my way to earn a side-income by building a micro-saas.</li> </ul>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/#to-setup-the-supabase","title":"To setup the supabase","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/#install-the-package","title":"Install the package","text":"<pre><code>npm install @supabase/supabase-js\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/#create-the-client","title":"Create the client","text":"<ul> <li>The location does not matter, I however kept it here in the components file</li> </ul> <pre><code>mkdir utils &amp;&amp; touch utils/supabaseClient.js\n</code></pre> <ul> <li>Inside the <code>supabaseClient.js</code> file</li> </ul> <pre><code>import { createClient } from \"@supabase/supabase-js\";\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/#storing-the-variables","title":"Storing the variables","text":"<ul> <li>Create the dotenv file</li> </ul> <pre><code>npm i dotenv &amp;&amp; touch .env.development\n</code></pre> <ul> <li>Save the keys in the file</li> </ul> <pre><code>SUPABASE_ANON_KEY = 'Keygoeshere'\nSUPABASE_URL = 'https://youruniqueurlgoeshere.supabase.co'\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/#creating-model","title":"Creating Model","text":"<pre><code>create table product (\n    id bigint generated by default as identity primary key,\n    display_name text not null,\n    is_visible boolean default false not null,\n    product_description text,\n    product_slug text not null,\n    deleted_at timestamp null,\n    inserted_at timestamp with time zone default timezone('ist'::text, now()) not null,\n    updated_at timestamp with time zone default timezone('ist'::text, now()) not null\n);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/#creating-an-api","title":"Creating an API","text":"<pre><code>mkdir pages/api &amp; touch pages/api/first-api.js\n</code></pre> <pre><code>import { supabase } from \"../../utils/supabaseClient\";\nexport default async function handler(req, res) {\n    // Change from(\"product\") to your object name\n    const { data } = await supabase.from(\"product\").select();\n    console.log(\"data\", data);\n    res.status(200).send(data);\n}\n</code></pre> <ul> <li>Add a row in supabase</li> <li>Test by clicking here</li> </ul>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/#best-practice","title":"Best Practice","text":"<ol> <li>Use the sql editor to create table or make modifications</li> <li>Store all the queries in a markdown file</li> </ol> <pre><code>mkdir api-lib &amp;&amp; touch api-lib/supaQueries.md\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Functions/","title":"Supabase Functions","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/Functions/#create-a-new-function","title":"Create a new function","text":"<ul> <li>Go in the directory you want to setup a new function</li> </ul> <pre><code>supabase functions new hello\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Functions/#deploy-a-function","title":"Deploy a function","text":"<ul> <li><code>projectUrlEnd</code> is the last identifier you find when you login to your project</li> </ul> <pre><code>supabase functions deploy hello --project-ref projectUrlEnd\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Functions/#delete-a-function","title":"Delete a function","text":"<pre><code>supabase functions delete hello --project-ref projectUrlEnd\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Functions/#local-deployment","title":"Local deployment","text":"<ol> <li>Would need docker for this :/</li> </ol>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/#creating-user-tables","title":"Creating user tables","text":"<pre><code>create table public.profiles (\n    id uuid not null references auth.users on delete cascade,\n    first_name text,\n    last_name text, \nprimary key (id)\n);\nalter table public.profiles enable row level security;\n\ncreate policy \"Users can update own profile.\"\non profiles for update\nusing ( auth.uid() = id );\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/#other-tables-with-rls","title":"Other tables with RLS","text":"<pre><code>create table gym_sessions (\n    id bigint primary key generated always as identity,\n    user_id uuid references auth.users (id) on delete cascade not null,\n    session_date timestamp with time zone default timezone('ist'::text, now()) not null,\n    deleted_at timestamp with time zone,\n    inserted_at timestamp with time zone default timezone('ist'::text, now()) not null,\n    updated_at timestamp with time zone default timezone('ist'::text, now()) not null\n);\nalter table public.gym_sessions enable row level security;\nCREATE POLICY store_gym_session\n  ON gym_sessions\n  FOR SELECT\n  USING (auth.uid() = user_id);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/","title":"Enums","text":"<ul> <li>For more info</li> </ul>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/#creating-enums","title":"Creating Enums","text":"<pre><code>create type mood as enum (\n  'happy',\n  'sad',\n  'excited',\n  'calm'\n);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/#using-in-a-table","title":"Using in a Table","text":"<pre><code>create table person (\n  id serial primary key,\n  name text,\n  current_mood mood\n);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/#updating-enums","title":"Updating Enums","text":"<pre><code>insert into person\n  (name, current_mood)\nvalues\n  ('Alice', 'happy');\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/#querying-data-with-enums","title":"Querying data with enums","text":"<pre><code>select * \nfrom person \nwhere current_mood = 'sad';\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/Enums/#deleting","title":"Deleting","text":"<pre><code>drop type if exists role;\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/Queries/RLS/","title":"RLS","text":"<p>Need to figure this out better</p>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/","title":"POST functions","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#for-reference","title":"For Reference","text":"<ul> <li>Read this</li> </ul>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#creating-tables","title":"Creating Tables","text":"<pre><code>create table random (\n    id bigint generated by default as identity primary key,\n    name varchar not null,\n    slug varchar(50) not null unique,\n    website varchar,\n    inserted_at timestamp with time zone default timezone('ist'::text, now()) not null,\n    updated_at timestamp with time zone default timezone('ist'::text, now()) not null\n);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#deleting-tables","title":"Deleting Tables","text":"<pre><code>drop table random\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#creating-user-links","title":"Creating User Links","text":"<pre><code>create table brand_users (\n    id bigint generated by default as identity primary key,\n    brand_id bigint references brands not null,\n    user_id uuid references auth.users not null,\n    created_by uuid references auth.users not null,\n    is_admin boolean default false not null,\n    inserted_at timestamp with time zone default timezone('ist'::text, now()) not null,\n    updated_at timestamp with time zone default timezone('ist'::text, now()) not null\n);\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#altering-table-name","title":"Altering Table Name","text":"<pre><code>ALTER TABLE customers\nRENAME COLUMN phone TO contact_phone;\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/POST%20functions/#add-column","title":"Add Column","text":"<pre><code>ALTER TABLE stores\nADD COLUMN delete_at timestamp with time zone default timezone('ist'::text, now()) null;\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/READ%20functions/","title":"READ functions","text":""},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/READ%20functions/#getting-timezones","title":"Getting TimeZones","text":"<pre><code>select name, abbrev, utc_offset, is_dst\nfrom pg_timezone_names()\norder by name;\n</code></pre> <pre><code>export async function getBookingFromSearch(query, callback) {\n    let pattern = /@/g;\n    let filterByEmail = null;\n    let filterByPhone = null;\n    let result = pattern.test(query);\n\n    if (result) {\n        filterByEmail = query;\n    } else {\n        filterByPhone = query;\n    }\n\n    let query = supabase\n        .from(\"bookings\")\n        .select(`*, brands(name)`)\n        .order(\"inserted_at\", { ascending: false });\n\n    if (filterByEmail) {\n        query = query.eq(\"booking_email\", filterByEmail);\n    }\n    if (filterByPhone) {\n        query = query.eq(\"booking_phone\", filterByPhone);\n    }\n\n    let { data: bookings, error } = await query;\n    if (error) {\n        return callback(error);\n    } else {\n        return callback(bookings);\n    }\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/1.%20Supabase/SQL%20Editor/Triggers/","title":"Triggers","text":"<pre><code>create table public.profiles (\n    id uuid references auth.users not null,\n    first_name text,\n    last_name text,\n    primary key (id)\n);\n\ncreate or replace function public.handle_new_user()\nreturns trigger as $$\nbegin\ninsert into public.profiles (id, email, phone, first_name, last_name)\nvalues (new.id, new.email, new.phone, new.raw_user_meta_data -&gt;&gt; 'first_name', new.raw_user_meta_data -&gt;&gt; 'last_name');\nreturn new;\nend;\n$$ language plpgsql security definer;\n\n\n-- create trigger on_auth_user_created\n-- after insert on auth.users\n-- for each row execute procedure public.handle_new_user();\n-- DROP TRIGGER IF EXISTS on_auth_user_created on auth.users;\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/#commands-i-use","title":"Commands I use","text":"<ul> <li>More here</li> </ul>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/#to-login","title":"To Login","text":"<pre><code>firebase login\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/#to-list-projects","title":"To List projects","text":"<pre><code>firebase projects:list\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/#to-initialize-a-new-project","title":"To initialize a new project","text":"<pre><code>firebase init\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/#to-deploy","title":"To deploy","text":"<pre><code>firebase deploy -m \"Deploying the best new feature ever.\"\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/","title":"Authentication Setup","text":"<ul> <li>Ensure that the firebase app is setup and authentication is added</li> </ul>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/#install-firebase","title":"Install Firebase","text":"<pre><code>npm install firebase\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/#create-config","title":"Create config","text":"<pre><code>mkdir utils\n</code></pre> <pre><code>touch utils/firebaseConfig.js\n</code></pre> <ul> <li>This command also has firestore and storage configs which have been committed out since they are not relevant to this part of the project</li> </ul> <pre><code>import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n// import { getFirestore } from \"firebase/firestore\";\n// import { getStorage } from \"firebase/storage\";\n\n\nconst firebaseConfig = {\n    apiKey: \"hlssfksfls2lldf\",\n    authDomain: \"firebaseapp.com\",\n    projectId: \"PROD\",\n    storageBucket: \"appspot.com\",\n    messagingSenderId: \"SENDERID\",\n    appId: \"APP\",\n};\n\n\n\nexport const app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n// export const db = getFirestore(app);\n// export const storage = getStorage(app);\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Context/","title":"Context","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Context/#create-the-context-file","title":"Create the context file","text":"<pre><code>mkdir context\n</code></pre> <pre><code>touch context/AuthContext.js\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Context/#fill-the-file","title":"Fill the file","text":"<pre><code>import { useEffect, useState, createContext, useContext } from \"react\";\nimport { auth } from \"../utils/firebaseConfig\";\n// import { getUserProfile } from \"../utils/firebaseUserRequests\";\nconst AuthContext = createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n\n\n\nexport function AuthProvider({ children }) {\nconst [currentUser, setCurrentUser] = useState(null);\nconst [uniqueId, setUniqueId] = useState(null);\nconst [authenticatedState, setAuthenticatedState] = useState(\"not-authenticated\");\n\n\n// async function checkUser() {\n    // const user = await auth.currentUser;\n        // if (user) {\n            // getUserProfile(setCurrentUser, user.uid);\n            // setAccessToken(user.accessToken);\n    // }\n// }\n\nuseEffect(() =&gt; {\n    const unsubscribe = auth.onAuthStateChanged((user) =&gt; {\n        if (user) {\n            setUniqueId(user.uid);\n            setAuthenticatedState(\"authenticated\");\n        } else {\n            setCurrentUser(null);\n            setUniqueId(null);\n            setAuthenticatedState(\"not-authenticated\");\n        }\n    });\n    return unsubscribe;\n}, []);\n\n// useEffect(() =&gt; {\n    // checkUser();\n// }, [authenticatedState]);\n\nlet sharedState = {currentUser,uniqueId};\n    return (\n        &lt;AuthContext.Provider value={sharedState}&gt;{children}&lt;/AuthContext.Provider&gt;\n    );\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Context/#create-the-getuser-utility","title":"Create the getUser utility","text":"<ul> <li>Optional</li> </ul> <pre><code>export async function getUserProfile(setCurrentUser, uniqueId) {\n    const usersRef = doc(db, \"user_profile\", uniqueId);\n    const userSnapShot = await getDoc(usersRef);\n    if (userSnapShot.exists()) {\n        setCurrentUser(userSnapShot.data());\n    } else {\n        setCurrentUser(null);\n    }\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Context/#call-the-context-to-the-app","title":"Call the context to the app","text":"<ul> <li>In the <code>_app.js</code> file</li> </ul> <pre><code>import { AuthProvider } from \"../context/AuthContext\";\nexport default function MyApp({ Component, pageProps }) {\n    return (\n        &lt;AuthProvider&gt;\n            &lt;Component {...pageProps} /&gt;\n        &lt;/AuthProvider&gt;\n    );\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/","title":"Signup and Login Forms","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#create-the-pages-and-utilty-file","title":"Create the pages and utilty file","text":"<pre><code>touch pages/login.js\n</code></pre> <pre><code>touch pages/signup.js\n</code></pre> <pre><code>touch utils/firebaseUserRequests.js\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#login-function","title":"Login function","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#login-form","title":"Login form","text":"<pre><code>import { useState } from \"react\";\nimport { userLoginEmail } from \"../utils/firebaseUserRequests\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { useRouter } from \"next/router\";\nexport default function Login() {\n\u00a0 const [userEmail, setUserEmail] = useState(\"\");\n\u00a0 const [password, setPassword] = useState(\"\");\n\u00a0 const [error, setError] = useState(null);\n\u00a0 const { uniqueId } = useAuth();\n\u00a0 const router = useRouter();\n\u00a0 async function userLogin(e) {\n\u00a0 \u00a0 e.preventDefault();\n\u00a0 \u00a0 if (userEmail === \"\" || password === \"\") {\n\u00a0 \u00a0 \u00a0 setError(\"Please fill all the fields\");\n\u00a0 \u00a0 } else {\n\u00a0 \u00a0 \u00a0 userLoginEmail(userEmail, password, setError);\n\u00a0 \u00a0 }\n\u00a0 }\n\u00a0 if (uniqueId) {\n\u00a0 \u00a0 router.push(\"/dashboard\");\n\u00a0 }\n\u00a0 return (\n\u00a0 \u00a0 &lt;form&gt;\n\u00a0 \u00a0 \u00a0 &lt;input\n\u00a0 \u00a0 \u00a0 \u00a0 type=\"email\"\n\u00a0 \u00a0 \u00a0 \u00a0 value={userEmail}\n\u00a0 \u00a0 \u00a0 \u00a0 onChange={(e) =&gt; setUserEmail(e.target.value)}\n\u00a0 \u00a0 \u00a0 /&gt;\n\u00a0 \u00a0 \u00a0 &lt;input\n\u00a0 \u00a0 \u00a0 \u00a0 type=\"password\"\n\u00a0 \u00a0 \u00a0 \u00a0 value={password}\n\u00a0 \u00a0 \u00a0 \u00a0 onChange={(e) =&gt; setPassword(e.target.value)}\n\u00a0 \u00a0 \u00a0 /&gt;\n\u00a0 \u00a0 \u00a0 &lt;div&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;button\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 onClick={(e) =&gt; userLogin(e)}\n\u00a0 \u00a0 \u00a0 \u00a0 &gt;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Login\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;/button&gt;\n\u00a0 \u00a0 \u00a0 &lt;/div&gt;\n\u00a0 \u00a0 &lt;/form&gt;\n\u00a0 );\n\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#create-the-userlogin-utility","title":"Create the UserLogin Utility","text":"<ul> <li>In the firebaseUserRequests file</li> <li>You can change the navigations link from <code>/dashboard</code></li> </ul> <pre><code>import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport Router from \"next/router\";\nimport { auth } from \"./firebaseConfig\";\n\nexport async function userLoginEmail(userEmail, password, setError) {\n\n\u00a0 await signInWithEmailAndPassword(auth, userEmail, password)\n\u00a0 \u00a0 .then(() =&gt; Router.push(\"/dashboard\"))\n\u00a0 \u00a0 .catch((error) =&gt; {\n\u00a0 \u00a0 \u00a0 setError(error.message);\n\u00a0 \u00a0 });\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#signup-function","title":"Signup function","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#signup-form","title":"Signup Form","text":"<pre><code>import { useState } from \"react\";\nimport { userSignUpEmail } from \"../utils/firebaseUserRequests\";\nimport { useAuth } from \"../context/AuthContext\"\nimport { useRouter } from \"next/router\";\nexport default function SignUp() {\n\u00a0 const [userEmail, setUserEmail] = useState(\"\");\n\u00a0 const [password, setPassword] = useState(\"\");\n\u00a0 const [error, setError] = useState(null);\n\u00a0 const { uniqueId } = useAuth();\n\u00a0 const router = useRouter();\n\u00a0 async function userSignUp(e) {\n\u00a0 \u00a0 e.preventDefault();\n\u00a0 \u00a0 if (userEmail === \"\" || password === \"\") {\n\u00a0 \u00a0 \u00a0 setError(\"Please fill all the fields\");\n\u00a0 \u00a0 } else {\n\u00a0 \u00a0 \u00a0 userSignUpEmail( userEmail.trim(), password, setError);\n\u00a0 \u00a0 }\n\u00a0 }\n\n\u00a0 if (uniqueId) {\n\u00a0 \u00a0 router.push(\"/dashboard\");\n\u00a0 }\n\n\u00a0 return (\n\u00a0 \u00a0 &lt;form&gt;  \n\u00a0 \u00a0 \u00a0 &lt;input\n\u00a0 \u00a0 \u00a0 \u00a0 type=\"email\"\n\u00a0 \u00a0 \u00a0 \u00a0 value={userEmail}\n\u00a0 \u00a0 \u00a0 \u00a0 onChange={(e) =&gt; setUserEmail(e.target.value)}\n\u00a0 \u00a0 \u00a0 /&gt;\n\u00a0 \u00a0 \u00a0 &lt;input\n\u00a0 \u00a0 \u00a0 \u00a0 type=\"password\"\n\u00a0 \u00a0 \u00a0 \u00a0 value={password}\n\u00a0 \u00a0 \u00a0 \u00a0 onChange={(e) =&gt; setPassword(e.target.value)}\n\u00a0 \u00a0 \u00a0 /&gt;\n\u00a0 \u00a0 \u00a0 &lt;div&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;button\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 onClick={(e) =&gt; userLogin(e)}\n\u00a0 \u00a0 \u00a0 \u00a0 &gt;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SignUp\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;/button&gt;\n\u00a0 \u00a0 \u00a0 &lt;/div&gt;\n\u00a0 \u00a0 &lt;/form&gt;\n\u00a0 );\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Authentication/Signup%20and%20Login%20Forms/#signup-utility","title":"Signup Utility","text":"<ul> <li>In the firebaseUserRequests file `</li> </ul> <pre><code>export async function userSignUpEmail( userEmail, password, setError) {\n\u00a0 createUserWithEmailAndPassword(auth, userEmail, password)\n\u00a0 \u00a0 .then(() =&gt; Router.push(\"/dashboard\"))\n\u00a0 \u00a0 .catch((error) =&gt; {\n\u00a0 \u00a0 \u00a0 setError(error.message);\n\u00a0 \u00a0 });\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#initialize-functions","title":"Initialize functions","text":"<ul> <li>Create a empty folder to run this command into</li> <li>You might be asked to login to firebase</li> <li>Follow the setup commands as mentioned then</li> </ul> <pre><code>firebase init functions\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#deploy-functions","title":"Deploy functions","text":"<pre><code>firebase deploy --only functions\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#default-configurations","title":"Default configurations","text":"<ul> <li>I use it to get started</li> </ul> <pre><code>const functions = require(\"firebase-functions\");\nconst admin = require(\"firebase-admin\");\nvar express = require(\"express\");\nvar app = express();\nconst cors = require(\"cors\")({ origin: true });\napp.use(cors);\nadmin.initializeApp();\nconst db = admin.firestore();\n\napp.get(\"/\", function (req, res) {\n    res.status(200).send(\"No User ID\");\n});\n\nexports.app = functions.https.onRequest(app);\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#to-start-the-emulators","title":"To Start the emulators","text":"<ul> <li>Test the APIs locally</li> <li>Check the logs to get the URL for testing</li> </ul> <pre><code>firebase emulators:start --only functions\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#to-test-locally","title":"To test locally","text":"<p>Check emulator logs to get the base URL</p>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/#to-kill-a-process-for-emulators","title":"To kill a process for emulators","text":"<ul> <li>Sometimes the processes are not killed properly</li> </ul> <pre><code>sudo lsof -i :8000\n</code></pre> <ul> <li>Add the pid in this command</li> </ul> <pre><code>kill PID\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/Environment%20Variables/","title":"Environment Variables","text":"<pre><code>\nfirebase functions:config:set config.key=\"SECRET_KEY\" config.pass=\"SECRET_PASS\"\n\n</code></pre> <p>NOTE: You must redeploy functions to make the new configuration available</p>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/Environment%20Variables/#accessing-env-variables","title":"Accessing env variables","text":"<pre><code>const secretKey  = firebase.config().config.key;\nconst secretPass = firebase.config().config.pass;\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/Environment%20Variables/#retrieve-all-variables","title":"Retrieve all variables","text":"<pre><code>firebase functions:config:get\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/Environment%20Variables/#unset-a-variable","title":"Unset a variable","text":"<pre><code>firebase functions:config:unset config.key\n</code></pre>"},{"location":"Database%20%2B%20CMS/2.%20Firebase/Functions/Environment%20Variables/#using-a-file-where-we-can-keep-all-the-environment-variables","title":"Using a file where we can keep all the environment variables.","text":"<p><code>env.json</code>, a file that will contain all our environment variables.  </p> <pre><code>{\n  \"config\": {\n    \"host\": \"domain\",\n    \"key\": \"SECRET_KEY\",\n    \"pass\": \"SECRET_PASS\"\n  }\n}\n</code></pre> <p>How to deploy the variables with the <code>env.json</code> file?  </p> <pre><code>firebase functions:config:set env=\"$(cat env.json)\"\n</code></pre>"},{"location":"Database%20%2B%20CMS/3.%20Sanity/","title":"Index","text":"<ul> <li>This is a nice CMS.</li> <li>Too much work to get started</li> <li>Too slow in my opinion</li> <li>Multi-references are weird.</li> <li>Validations are weird as well.</li> <li>Not a big community.</li> </ul>"},{"location":"Database%20%2B%20CMS/3.%20Sanity/#install-sanity","title":"Install Sanity","text":"<ol> <li>It will also ask to the select project</li> </ol> <pre><code>npm create sanity@latest -- --template clean\n</code></pre> <pre><code>cd sanity &amp;&amp; npm run dev\n</code></pre>"},{"location":"Database%20%2B%20CMS/3.%20Sanity/#running-project","title":"Running Project","text":""},{"location":"Database%20%2B%20CMS/3.%20Sanity/#creating-schemas","title":"Creating Schemas","text":"<ol> <li>Cd into the project inside Sanity</li> </ol> <pre><code>touch pet.js\n</code></pre> <pre><code>// schemas/pet.js\nexport default {\n  name: \"pet\",\n  type: \"document\",\n  title: \"Pet\",\n  fields: [\n    {\n      name: \"name\",\n      type: \"string\",\n      title: \"Name\",\n    },\n  ],\n};\n</code></pre> <pre><code>// schemas/index.js\nimport pet from \"./pet\";\nexport const schemaTypes = [pet];\n</code></pre>"},{"location":"Database%20%2B%20CMS/4.%20Strapi/","title":"My Strapi Notes","text":"<ul> <li>Strapi is a headless CMS tool</li> <li>It is also open source. </li> <li>I am interested in figuring out the best way to use it with Gatsby to create sites </li> <li>Strapi documentation</li> </ul>"},{"location":"Database%20%2B%20CMS/4.%20Strapi/Common%20command%20I%20use/","title":"Common command I use","text":""},{"location":"Database%20%2B%20CMS/4.%20Strapi/Common%20command%20I%20use/#strapi-admin-password-reset","title":"Strapi admin password reset","text":"<pre><code>npm run strapi admin:reset-user-password\n</code></pre>"},{"location":"Database%20%2B%20CMS/4.%20Strapi/New%20Project/","title":"New Project","text":""},{"location":"Database%20%2B%20CMS/4.%20Strapi/New%20Project/#create-a-strapi-project","title":"Create a Strapi Project","text":"<pre><code>npx create-strapi-app my-project \n</code></pre>"},{"location":"Database%20%2B%20CMS/4.%20Strapi/New%20Project/#strapi-app-quickstart","title":"Strapi app quickstart","text":"<ul> <li>Quickstart uses the default database (SQLite)</li> </ul> <pre><code>npx create-strapi-app my-project --quickstart\n</code></pre>"},{"location":"Database%20%2B%20CMS/4.%20Strapi/New%20Project/#running-strapi","title":"Running Strapi","text":"<ul> <li>To start the Strapi application, run the following command in the project folder:</li> <li>If you are running this for the first time, it will open signup for admin form</li> </ul> <pre><code>npm run develop\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/5.%20Ghost/#installing-the-cli","title":"Installing the cli","text":"<pre><code>npm install ghost-cli@latest -g\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#install-ghost","title":"Install Ghost","text":"<ul> <li>Need node version <code>14.16.1</code> to run ghost</li> </ul> <pre><code>ghost install local\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#starting-stopping","title":"Starting &amp; Stopping","text":"<ul> <li>Ghost runs in a separate background process and remains running until you stop it or restart your computer. So you may find these commands useful for taming it:</li> </ul>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#to-start","title":"To Start","text":"<pre><code>ghost start\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#to-stop-ghost","title":"To stop Ghost","text":"<pre><code>ghost stop\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#view-logs","title":"View logs","text":"<pre><code>ghost log\n</code></pre>"},{"location":"Database%20%2B%20CMS/5.%20Ghost/#list-of-all-the-running-ghost-blogs","title":"List of all the running ghost blogs","text":"<pre><code>ghost ls\n</code></pre> <ul> <li>Run <code>ghost help</code> for a list of available commands, or explore the full Ghost-CLI documentation</li> </ul>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/","title":"Index","text":""},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/#prisma","title":"Prisma","text":"<ul> <li>This is the website</li> <li>Cool new easy-ish to setup tool for me</li> </ul>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/APIs/","title":"APIs","text":""},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/APIs/#querying-data-from-prisma","title":"Querying data from Prisma","text":"<pre><code>import prisma from \"../../utils/prisma\";\n\nfunction bigIntToString(obj) {\n    for (let key in obj) {\n        if (typeof obj[key] === \"bigint\") {\n            obj[key] = obj[key].toString();\n        } \n        else if (typeof obj[key] === \"object\" &amp;&amp; obj[key] !== null) {\n            bigIntToString(obj[key]);\n        }\n    }\n}\n// GET /api/users\nexport default async function handle(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            const users = await prisma.user.findMany();\n            users.forEach((user) =&gt; bigIntToString(user));\n            res.status(200).json(users);\n        } \n        catch (error) {\n            console.error(\"Request error\", error);\n            res.status(500).json({ error: \"Error fetching users\" });\n        }\n        } \n        else {\n        // Handle any other HTTP method\n            res.setHeader(\"Allow\", [\"GET\"]);\n            res.status(405).json({ error: `Method ${req.method} Not Allowed` });\n    }\n}\n\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Getting%20Started/","title":"Getting Started","text":""},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Getting%20Started/#url-format","title":"URL FORMAT","text":"<pre><code>DATABASE_URL=\"postgresql://vedantlohbare:&lt;password&gt;@localhost:5432/&lt;DATABASE&gt;?schema=SCHEMA\"\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Getting%20Started/#perform-migration","title":"Perform migration","text":"<ul> <li>The name can be changed</li> </ul> <pre><code>npx prisma migrate dev --name add_name_email_to_user\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Getting%20Started/#run-studio","title":"Run studio","text":"<pre><code>npx prisma studio\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Getting%20Started/#on-production","title":"On Production","text":"<pre><code>https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-22-04\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/","title":"Local psql","text":""},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#start-a-server","title":"Start a server","text":"<pre><code>brew services start postgresql@15\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#check-if-server-is-running","title":"Check if server is running","text":"<pre><code>brew services list\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#stop-local-postgress","title":"Stop local postgress","text":"<pre><code>brew services stop postgresql@15\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#restart-services","title":"Restart services","text":"<pre><code>brew services restart postgresql@15\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#list-of-all-databases","title":"List of all databases","text":"<pre><code>psql -l\n\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#create-database","title":"Create database","text":"<pre><code>CREATE DATABASE database_name;\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#enter-psql","title":"Enter psql","text":"<pre><code>psql -d &lt;DATABASE&gt;\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#exit-psql","title":"Exit psql","text":"<pre><code>\\q\n</code></pre> <p>For more info</p>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#view-all-tables-in-psql","title":"View all tables in psql","text":"<pre><code>\\dt\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Local%20psql/#run-a-local-query","title":"Run a local query","text":"<pre><code>select * from \"User\";\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Migrations/","title":"Migrations","text":""},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Migrations/#perform-migration","title":"Perform migration","text":"<ul> <li>The name can be changed</li> </ul> <pre><code>npx prisma migrate dev --name add_name_email_to_user\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Migrations/#schema-prismaschema","title":"Schema prisma.schema","text":"<ul> <li>the file name <code>schema.prisma</code></li> <li>Re-check the schema file, this was created by chatGPT</li> </ul> <pre><code>// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\ndatasource db {\n    provider = \"postgresql\"\n    url = env(\"DATABASE_URL\")\n}\n\nmodel User {\n    id BigInt @id @default(autoincrement())\n    name String // New field for the user's name\n    email String @unique // New field for the user's email, marked as unique\n    sessions Session[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n} \n\nmodel Session {\n    id BigInt @id @default(autoincrement())\n    userId BigInt\n    user User @relation(fields: [userId], references: [id])\n    sessionExercises SessionExercise[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel Exercise {\n    id BigInt @id @default(autoincrement())\n    name String\n    sessionExercises SessionExercise[]\n    exerciseFocusAreas ExerciseFocusArea[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel SessionExercise {\n    id BigInt @id @default(autoincrement())\n    sessionId BigInt\n    exerciseId BigInt\n    session Session @relation(fields: [sessionId], references: [id])\n    exercise Exercise @relation(fields: [exerciseId], references: [id])\n    sessionExerciseSets SessionExerciseSet[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel FocusArea {\n    id BigInt @id @default(autoincrement())\n    name String\n    muscleGroup String\n    exerciseFocusAreas ExerciseFocusArea[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel ExerciseFocusArea {\n    id BigInt @id @default(autoincrement())\n    exerciseId BigInt\n    focusAreaId BigInt\n    exercise Exercise @relation(fields: [exerciseId], references: [id])\n    focusArea FocusArea @relation(fields: [focusAreaId], references: [id])\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel SessionExerciseSet {\n    id BigInt @id @default(autoincrement())\n    sessionExerciseId BigInt\n    roundCount Int\n    weight BigInt\n    weightUnitId Int\n    sessionExercise SessionExercise @relation(fields: [sessionExerciseId], references: [id])\n    weightUnit WeightUnit @relation(fields: [weightUnitId], references: [id])\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n} \n\nmodel WeightUnit {\n    id Int @id @default(autoincrement())\n    name String\n    sessionExerciseSets SessionExerciseSet[]\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n</code></pre>"},{"location":"Database%20%2B%20CMS/6.%20Prisma%20%2B%20Postgresql/Migrations/#seed-file","title":"Seed file","text":"<ul> <li>in the <code>seed.js</code> file</li> </ul> <pre><code>const { PrismaClient } = require(\"@prisma/client\");\nconst prisma = new PrismaClient();\n\nasync function main() {\nconsole.log(`Start seeding ...`);\n\n\n\n// Seed Users\n\nconst users = [];\nconst list = [\"vedant1\", \"anjali1\", \"trainer1\"];\n\nfor (const item of list) {\n    const user = await prisma.user.create({\n        data: { name: item, email: `${item}@gymapp.com` },\n    });\n    users.push(user);\n}\n\n// Seed Sessions\nconst sessions = [];\nfor (let i = 1; i &lt;= 5; i++) {\n    const session = await prisma.session.create({\n        data: { userId: users[i % users.length].id },\n    });\n    sessions.push(session);\n}\n\n// Seed Exercises\n\nconst exercises = [];\nfor (let i = 1; i &lt;= 5; i++) {\nconst exercise = await prisma.exercise.create({\n        data: { name: `Exercise ${i}` },\n    });\n    exercises.push(exercise);\n}\n\n\n\n// Seed SessionExercises\n\nfor (const session of sessions) {\n    for (const exercise of exercises) {\n    await prisma.sessionExercise.create({\n        data: {\n            sessionId: session.id,\n            exerciseId: exercise.id,\n            },\n        });\n    }\n}\n\n\n\n// Seed FocusAreas\nconst focusAreaData = [\n    { name: \"Chest\", muscleGroup: \"Upper Body\" },\n    { name: \"Back\", muscleGroup: \"Upper Body\" },\n    { name: \"Legs\", muscleGroup: \"Lower Body\" },\n    { name: \"Arms\", muscleGroup: \"Upper Body\" },\n    { name: \"Shoulders\", muscleGroup: \"Upper Body\" },\n];\n\n\n\nfor (const { name, muscleGroup } of focusAreaData) {\n    await prisma.focusArea.create({\n        data: { name, muscleGroup },\n    });\n}\n\n// Seed ExerciseFocusAreas\nfor (const exercise of exercises) {\n    for (let i = 1; i &lt;= 5; i++) {\n        await prisma.exerciseFocusArea.create({\n            data: { exerciseId: exercise.id, focusAreaId: i },\n        });\n    }\n}\n\n\n\n// Seed WeightUnits\nfor (const name of [\"kg\", \"lbs\"]) {\n    await prisma.weightUnit.create({\n        data: { name },\n    });\n}\n\n\n\n// Seed SessionExerciseSets\n\nconst sessionExercises = await prisma.sessionExercise.findMany();\nfor (const sessionExercise of sessionExercises) {\n    await prisma.sessionExerciseSet.create({\n        data: {\n            sessionExerciseId: sessionExercise.id,\n            roundCount: Math.floor(Math.random() * 5) + 1, // Random rounds between 1 and 5\n            weight: Math.floor(Math.random() * 100), // Random weight\n            weightUnitId: Math.floor(Math.random() * 2) + 1, // Randomly select between 1 and 2\n        },\n    });\n}\n\n\nconsole.log(`Seeding finished.`);\n}\n\n\n\nmain()\n.then(async () =&gt; {\n    await prisma.$disconnect();\n})\n.catch(async (e) =&gt; {\n    console.error(e);\n    await prisma.$disconnect();\n    process.exit(1);\n});\n</code></pre> <ul> <li>In the <code>package.json</code></li> </ul> <pre><code>{\n    \"prisma\": {\n        \"seed\": \"node prisma/seed.js\"\n    },\n}\n</code></pre> <ul> <li>Run the seeds file</li> </ul> <pre><code>npx prisma db seed\n</code></pre> <ul> <li>Run studio</li> </ul> <pre><code>npx prisma studio\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/","title":"Index","text":"<ul> <li>I started using NextJs because there were some limitations on Gatsby, especially when using Supabase to add authentication.</li> <li>I am sure there are workaround that but I do not know enough node to do that, probably. </li> <li>Anyway, nextjs is really amazing. Very similar to gatsby</li> </ul>"},{"location":"Front-end%20Frameworks/1.%20NextJs/APIs/","title":"Index","text":"<pre><code>import { supabase } from \"utils/supabaseClient\";\n    export default async function handler(req, res) {\n    res.status(200).send({ shop: true });\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Axios/","title":"Index","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Axios/#using-axios","title":"Using Axios","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Axios/#post-request-with-axios","title":"Post Request with Axios","text":"<ul> <li>Import axios first</li> </ul> <pre><code>async function handleSubmit() {\n    const adData = {\n        title: title,\n        description: adCopy,\n        productData: selectedProduct,\n        shopData: shopData,\n    };\n    axios\n    .post(\"/api/db/post-advert\", adData)\n    .then(function (response) {\n    // TODO: toast message and redirect\n    })\n    .catch(function (error) {\n    console.error(error);\n    });\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Axios/#get-request","title":"Get request","text":"<pre><code>await axios.get(\"/api/db/get-testimonyal\", {params: {shopId: shopId}})\n.then(function (response) {\n    // TODO: toast message and redirect\n    console.log(response);\n})\n.catch(function (error) {\n    console.error(error);\n});\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20Airtable/","title":"From Airtable","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20Airtable/#install-airtable","title":"Install Airtable","text":"<pre><code>npm i airtable\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20Airtable/#get-static-data","title":"Get Static Data","text":"<pre><code>import Airtable from \"airtable\";\n\nconst airtable = new Airtable({\n    apiKey: process.env.NEXT_PUBLIC_AIRTABLE_API_KEY,\n});\n\nexport async function getStaticProps() {\n    const records = await airtable\n        .base(process.env.NEXT_PUBLIC_AIRTABLE_BASE_ID)(\"Hindi\")\n        .select({\n            fields: [\"Lyrics\", \"Song name\", \"artist\", \"genre\"],\n        })\n        .all();\n\n    const songData = records.map((record) =&gt; {\n        return {\n            id: record.getId(),\n            lyrics: record.get(\"Lyrics\"),\n            song: record.get(\"Song name\"),\n            artist: record.get(\"artist\"),\n            genre: record.get(\"genre\"),\n        };\n    });\n\n    const songOptions = records.map((record) =&gt; {\n        return {\n            id: record.getId(),\n            song: record.get(\"Song name\"),\n            isCorrect: false,\n        };\n    });\n\n    shuffleArray(songData);\n    shuffleArray(songOptions);\n\n    return {\n        props: {\n            songData,\n            songOptions,\n        },\n    };\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20GraphQL/","title":"From GraphQL","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20GraphQL/#install-graphql-request","title":"install graphql-request","text":"<pre><code>npm i graphql-request\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20GraphQL/#get-static-data","title":"Get static data","text":"<pre><code>import { GraphQLClient } from \"graphql-request\";\nconst graphcms = new GraphQLClient(process.env.GRAPHCMS_URL);\n\nexport async function getStaticProps({ params }) {\n    const { test } = await graphcms.request(\n        `query TestPageQuery($slug: String!){\n        test(where: {slug: $slug}) {\n                id\n            slug\n            title\n            description\n            testquestions {\n              questionString\n              answers\n              trivia {\n                html\n                text\n              }\n              gif {\n                url\n              }\n            }\n        }\n      }`,\n        {\n            slug: params.slug,\n        }\n    );\n\n    return {\n        props: {\n            test,\n        },\n    };\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20a%20JSON%20file/","title":"From a JSON file","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20a%20JSON%20file/#create-a-data-folder-and-paste-the-json-there","title":"Create a data folder and paste the JSON there","text":"<pre><code>mkdir data\n</code></pre> <pre><code>touch data/statements.json\n</code></pre> <ul> <li>In the file paste the following JSON</li> </ul> <pre><code>[\n  {\n    \"right\": [\n      \"Genius. How did you guess that :O\",\n      \"You rode your luck that time :P\",\n      \"How did you get that :)\"\n    ],\n    \"wrong\": [\n      \"Better luck in the next question :|\",\n      \"You can do better :)\",\n      \"I thought that was right too :/\"\n    ]\n  }\n]\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Data/From%20a%20JSON%20file/#importing-json","title":"Importing JSON","text":"<pre><code>import statements from \"../data/statement.json\";\n</code></pre> <ul> <li>You can now use the variable <code>tests</code>inside your file. The format is the same as you created it. </li> </ul>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/","title":"1. Start","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#manual-setup","title":"Manual Setup","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#create-the-react-app","title":"Create the react app","text":"<pre><code>npm install next react react-dom\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#add-nextjs-packages","title":"Add nextjs packages","text":"<ul> <li>Open <code>package.json</code> and add the following <code>scripts</code>:</li> </ul> <pre><code>\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\"\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#add-gitignore","title":"Add gitignore","text":"<pre><code>touch .gitignore\n</code></pre> <ul> <li>Paste the following in it</li> </ul> <pre><code># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env.*\n\n# vercel\n.vercel\n\n.*\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#create-the-pages-folder","title":"Create the pages folder","text":"<pre><code>mkdir pages &amp;&amp; touch pages/_app.js\n</code></pre> <ul> <li>This has to be copied in the <code>_app.js</code> file</li> <li>You can update this file to add styles components</li> </ul> <pre><code>export default function MyApp({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <ul> <li>Home page</li> </ul> <pre><code>touch pages/index.js\n</code></pre> <pre><code>import React from \"react\";\nexport default function Home() {\n\n    return &lt;div&gt;This is the home page&lt;/div&gt;;\n\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/1.%20Start/#add-components-folder","title":"Add components folder","text":"<pre><code>mkdir components &amp;&amp; touch components/index.js\n</code></pre> <pre><code>export * from \"./QuizResult\";\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/2.%20New%20Component%20Configurations/","title":"2. New Component Configurations","text":"<ul> <li>Normally when I create a new component, I configure it this way</li> <li>In the  <code>index.js</code></li> </ul> <pre><code>\nimport React from \"react\"\nimport { Wrapper } from \"./styles\"\n\nexport function Something() {\n    return(\n        &lt;Wrapper&gt;\n            &lt;h1&gt;Something&lt;/h1&gt;\n        &lt;/Wrapper&gt;\n    )\n}\n</code></pre> <ul> <li>In the <code>styles.js</code></li> <li>Note this uses the styled - components</li> </ul> <pre><code>import styled from \"styled-components\"\nimport { colors } from \"../../styles/GlobalStyles\"\n\nexport const Wrapper = styled.div`\n    margin: 30px;\n`\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/3.%20Tailwind%20CSS/","title":"3. Tailwind CSS","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/3.%20Tailwind%20CSS/#install-tailwind","title":"Install tailwind","text":"<pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/3.%20Tailwind%20CSS/#configure-template-files","title":"Configure template files","text":"<ol> <li>Open the file <code>tailwind.config.js</code> and paste the following</li> </ol> <pre><code>module.exports = {\n  content: [\n    \"./atoms/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    fontFamily: {\n      sans: [\"Ariel\", \"sans-serif\"],\n    },\n    extend: {\n      colors: {\n        \"background-white\": \"#f8f7f6\",\n        \"brand-white\": \"#FCFCFC\",\n        \"brand-blue\": \"#012F7C\",\n        \"brand-green\": \"#48A9A6\",\n        \"brand-black\": \"#494953\",\n        \"brand-red\": \"#C1666B\",\n        \"brand-yellow\": \"#F2BC41\",\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/New%20Project/3.%20Tailwind%20CSS/#paste-the-styles","title":"Paste the styles","text":"<ol> <li>Create a styles folder</li> </ol> <pre><code>mkdir styles &amp;&amp; echo \"@tailwind base; @tailwind components; @tailwind utilities;\" &gt; styles/globals.css\n</code></pre> <p>OR</p> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <ol> <li>Import in <code>_app.js</code></li> </ol> <pre><code>import \"../styles/globals.css\";\n</code></pre> <ol> <li>Create postCss</li> </ol> <pre><code>touch postcss.config.js\n</code></pre> <ul> <li>Inside the file</li> </ul> <pre><code>module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n</code></pre> <ol> <li>Test</li> </ol> <pre><code>export default function Home() {\n  return &lt;p className=\"text-3xl font-bold underline\"&gt;Hello world!&lt;/p&gt;;\n}\n\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Pages/1.%20Static%20pages/","title":"1. Static pages","text":"<ul> <li>Assuming you need to add static data for a collection called <code>tests</code></li> </ul>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Pages/1.%20Static%20pages/#create-the-collection-folder","title":"Create the collection folder","text":"<pre><code>mkdir pages/tests\n</code></pre> <pre><code>touch pages/tests/[slug].js\n</code></pre> <ul> <li>This would create links for the dynamic pages in the format -&gt; <code>/tests/slug</code></li> </ul>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Pages/1.%20Static%20pages/#creating-paths","title":"Creating paths","text":"<ul> <li>We use the graphcms data to create static paths here</li> <li>But can be used for anything</li> </ul> <pre><code>import { GraphQLClient } from \"graphql-request\";\nconst graphcms = new GraphQLClient(process.env.GRAPHCMS_URL);\n\nexport async function getStaticPaths() {\n    const { tests } = await graphcms.request(`{\n        tests {\n              slug\n              id\n              title\n        }\n  }`);\n\n    return {\n        paths: tests.map(({ slug }) =&gt; ({ params: { slug } })),\n        fallback: false,\n    };\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Pages/GetProps/","title":"GetProps","text":"<p>Read this</p>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Some%20Functions/","title":"Index","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Some%20Functions/#using-regex-to-create-breadcrumbs","title":"Using regex to create breadcrumbs","text":"<pre><code>export function getLastLinkName(linkName, pageName) {\nvar re = new RegExp(`[\\[]`);\nif (re.test(linkName)) {\n    return pageName;\n} else {\nvar array = linkName.split(\"/\");\n        return array[array.length - 1];\n    }\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Add%20Styled%20Components/","title":"Add Styled Components","text":"<ul> <li>The process for adding styled components in a nextjs is easy but the styled components take some time for the initial load. </li> <li>To remove this initial load time, these steps need to be followed</li> <li>Following this article - link</li> </ul>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Add%20Styled%20Components/#install-the-styled-components","title":"Install the styled components","text":"<pre><code>npm i babel-plugin-styled-components\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Add%20Styled%20Components/#add-the-babel-configs","title":"Add the babel configs","text":"<ul> <li>Create the <code>.babelrc</code> file</li> </ul> <pre><code>touch .babelrc\n</code></pre> <ul> <li>The final <code>.babelrc</code> file should look like this</li> </ul> <pre><code>{\n  \"presets\": [\n    \"next/babel\"\n  ],\n  \"plugins\": [\n    [\n      \"styled-components\",\n      {\n        \"ssr\": true,\n        \"displayName\": true,\n        \"preprocess\": false\n      }\n    ]\n  ]\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Add%20Styled%20Components/#in-the-_documentjs-page","title":"In the _document.js page","text":"<ul> <li>Add the following code in the <code>_document.js</code> page.</li> <li>I wish I could understand this, however this is also recommended in the official documentation</li> <li>Link</li> </ul> <pre><code>touch pages/_document.js\n</code></pre> <pre><code>import Document from \"next/document\";\nimport { ServerStyleSheet } from \"styled-components\";\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () =&gt;\n        originalRenderPage({\n          enhanceApp: (App) =&gt; (props) =&gt;\n            sheet.collectStyles(&lt;App {...props} /&gt;),\n        });\n\n      const initialProps = await Document.getInitialProps(ctx);\n      return {\n        ...initialProps,\n        styles: (\n          &lt;&gt;\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          &lt;/&gt;\n        ),\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Create%20Global%20Styles/","title":"Create Global Styles","text":""},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Create%20Global%20Styles/#create-global-styles","title":"Create Global Styles","text":"<pre><code>mkdir styles\n</code></pre> <pre><code>touch styles/GlobalStyles.js\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Create%20Global%20Styles/#paste-the-default-global-styles","title":"Paste the default Global Styles","text":"<pre><code>import { createGlobalStyle } from \"styled-components\";\n\nexport const colors = {\n  primaryBlack: \"#262626\",\n  darkGrey: \"#BBC8D4\",\n  primaryBlue: \"#0069FF\",\n  lightBlue: \"#66A5FF\",\n  brandYellow: \"#FFE866\",\n  white: \"#FAFAFA\",\n};\n\nexport const GlobalStyles = createGlobalStyle`\n  :root {\n    --site-max-width: 1200px;\n  }\n\n\n  body {\n    font-family: 'Inter', sans-serif;\n    background-color: ${colors.white};\n    border: 10px solid ${colors.brandYellow}; \n    min-height: 100vh;\n    margin: 0;\n    padding: 0;\n  }\n\n  main {\n    margin-right: auto;\n    margin-left: auto;\n    min-height: 80vh;\n  }\n\n\n  h1{    \n    font-style: normal;\n    font-weight: normal;\n    font-size: 32px;\n    line-height: 32px;\n    letter-spacing: -1px;\n    @media screen and (min-width: 768px) {\n      font-size: 52px;\n      line-height: 63px;\n    }\n    .bold {\n      font-weight: 700;\n    }\n  }\n\n  h2{    \n    font-style: normal;\n    font-weight: 200;\n    font-size: 28px;\n    line-height: 30px;\n    @media screen and (min-width: 768px) {\n      font-size: 38px;\n      line-height: 46px;\n    }\n    .bold {\n      font-weight: 400;\n    }\n  }\n\n  h3{\n    font-style: normal;\n    font-weight: normal;\n    font-size: 22px;\n    line-height: 22px;\n    @media screen and (min-width: 768px) {\n      font-size: 28px;\n      line-height: 34px;\n    }\n  }\n\n  h4{    \n    font-style: normal;\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 20px;\n    @media screen and (min-width: 768px) {\n      font-size: 24px;\n      line-height: 29px;\n    }\n  }\n\n  p, a, li {\n    color: ${colors.washedBlack};\n    font-style: normal;\n    font-weight: 300;\n    font-size: 16px;\n    line-height: 18px;\n    @media screen and (min-width: 768px) {\n      font-size: 18px;\n      line-height: 26px;\n    }\n  }\n\n  li{\n    margin-bottom: 20px;\n  }\n\n  small{\n    font-style: normal;\n    font-weight: 200;\n    font-size: 14px;\n    text-transform: uppercase;\n    line-height: 16px;\n    &gt; a {\n      font-size: 14px;\n    }\n  }\n\n  a {\n    font-weight: 500;\n    text-decoration: none;\n    color: ${colors.primaryBlack};\n    &amp;:hover {\n      text-decoration: none; \n    }\n  }\n\n  button {\n    color: ${colors.primaryBlue};\n    background: ${colors.white};\n    font-style: normal;\n    font-weight: 600;\n    cursor: pointer;\n    padding: 10px 14px;\n    margin: 5px 10px 5px 0px;\n    border-radius: .25rem;\n    border: 2px solid ${colors.primaryBlack};\n    box-shadow: 3px 3px 0 ${colors.primaryBlack};\n    transition: all 0.05s ease-in;\n    @media screen and (min-width: 768px) {\n      font-size: 18px;\n      padding: 15px 30px;\n      margin: 10px 30px 10px 0px;\n    }\n    &amp;:hover{\n      transform: translate(4px, 4px);\n      box-shadow: 1px 1px 0px ${colors.primaryBlack};\n    }\n    &amp;:disabled{  \n      background: ${colors.darkGrey};\n      transform: translate(4px, 4px);\n      box-shadow: 0px 0px 0px ${colors.primaryBlack}; \n    }\n  }\n\n\n  .Container {\n    margin-left: 30px;\n    margin-right: 30px;\n    @media screen and (min-width: 768px) {\n      margin-left: 60px;\n      margin-right: 60px;\n    }\n    @media screen and (min-width: 1024px) {\n      margin-left: 60px;\n      margin-right: 60px;\n    }\n    @media screen and (min-width: 1324px) {\n      margin-left: 150px;\n      margin-right: 150px;\n    }\n    @media screen and (min-width: 1920px) {\n      max-width: 1600px;\n      margin-left: auto;\n      margin-right: auto;\n    }\n  }\n\n`;\n</code></pre>"},{"location":"Front-end%20Frameworks/1.%20NextJs/Styled%20Components/Create%20Global%20Styles/#adding-the-global-styles","title":"Adding the global styles","text":"<ul> <li>Import globalstyles in <code>_app.js</code> file</li> </ul> <pre><code>import { GlobalStyles } from \"../styles/GlobalStyles\";\nfunction MyApp({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;GlobalStyles /&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default MyApp;\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/","title":"My Gatsby notes","text":"<ul> <li>I use gatsby to create static sites and landing pages.</li> <li>I just stumbled on this SSG, there are obviously hundreds if not thousand options available. </li> <li>I found it more customisable than jekyll and that is why I have probably used it more extensively than jekyll</li> <li>I use it to create all my landing pages. </li> <li>Although I must say the only thing I hate about gatsby is the time it takes to generate a new build. In comparison, jekyll or mkdocs are almost instantaneous. </li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/","title":"Common styles I use","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#import-colors","title":"Import Colors","text":"<ul> <li>Make sure the colors are in the <code>GlobalStyles.js</code> file</li> </ul> <pre><code>    import { colors } from \"../../styles/GlobalStyles\"\n</code></pre> <ul> <li>Usage</li> </ul> <pre><code>color: ${colors.white};\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#media-screen","title":"Media Screen","text":"<ul> <li>Change the width to get the desired output <code>786</code> for table <code>1024</code> for desktop</li> </ul> <pre><code>@media screen and (min-width: 768px) {\n    margin: 20px;\n}   \n\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#importing-an-image","title":"Importing an image","text":"<pre><code>import DateIcon from \"../../images/calendar.svg\"    \n\n&lt;img src={DateIcon} alt=\"date\" /&gt;\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#creating-a-grid","title":"Creating a grid","text":"<ul> <li>Read more here Link</li> </ul> <pre><code>    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 5px;\n    @media (min-width: 768px) {\n            grid-template: 3fr / 1fr 2fr;\n            grid-area: sidebar;\n    }\n\n</code></pre> <pre><code>grid-template-areas: \n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#using-props","title":"Using Props","text":"<ol> <li>Here I am checking if the prop is event</li> </ol> <pre><code>\nbackground: ${props =&gt;\n        props.col % 2 === 0 ? `${colors.off_primary}` : `${colors.nav}`};\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Common%20styles%20I%20use/#variables-in-string","title":"Variables in string","text":"<pre><code>&lt;Link to={`/properties/${id}`}&gt;\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Conditional%20Statements/","title":"Conditional Statements","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Conditional%20Statements/#nested-conditions-in-jsx","title":"Nested conditions in JSX","text":"<ul> <li>I am checking if <code>YoutubeLink</code> is <code>null</code> and if it is <code>null</code> then if the <code>TwitterLink</code> exists.</li> </ul> <pre><code>{item.data.YoutubeLink !== null ? (\n    &lt;Youtube link={item.data.YoutubeLink} /&gt;\n) : (\n    [\n        item.data.TwitterLink !== null ? (\n            &lt;Twitter link={item.data.TwitterLink} /&gt;\n        ) : (\n            &lt;FeedbackImage\n                link={item.data.SheroesLInk}\n                imageUrl={item.data.Attachments[0].url}\n            /&gt;\n        ),\n    ]\n)}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Find%20and%20Filter/","title":"Find and Filter","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Find%20and%20Filter/#filter","title":"Filter","text":"<pre><code>const featuredRole = roleData?.filter(\n    roleData =&gt; roleData.data.RoleCompanySearch === selectedCompany\n)\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Find%20and%20Filter/#find","title":"Find","text":"<p>```</p>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Local%20Storage/","title":"Local Storage","text":"<p>Local Storage</p>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Loops%20in%20Gatsby/","title":"Loops in Gatsby","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Loops%20in%20Gatsby/#using-map-function","title":"Using Map function","text":"<pre><code>{data.allQuestionsJson.nodes.map(item =&gt; (\n&lt;div&gt;{item.question}&lt;/div&gt;\n))}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Loops%20in%20Gatsby/#mapping-over-a-node","title":"Mapping over a node","text":"<pre><code>\nrender={data =&gt; (\n&lt;div class=\"featured-products\"&gt;\n    {data.allContentfulFeaturedProduct.edges.map(({ node }, i) =&gt; (\n &lt;div class=\"product\" key={i}&gt;\n  &lt;div&gt;{product}&lt;/div&gt;\n &lt;/div&gt;\n    ))}\n&lt;/div&gt;\n)}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Loops%20in%20Gatsby/#repeat-n-times","title":"Repeat n times","text":"<p>id:: 6496cdde-eced-45a3-9cf6-964b2ef14353</p> <pre><code>const array = []\nlet i = 0\nfor (; i &lt; 11; i++) {\n    array.push(i)\n}\n</code></pre> <ul> <li>In the JSX you can use array   <code>{array.map(item =&gt; (     &lt;button key={item} onClick={() =&gt; handleAnswerOptionClick(item)}&gt;   {item}     &lt;/button&gt;   ))}</code></li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/New%20Project/","title":"New Project","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/New%20Project/#create-a-new-gatsby-project","title":"Create a new gatsby project","text":"<ul> <li>This will create a new gatsby project with the default starter</li> </ul> <pre><code>gatsby new\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/New%20Project/#create-a-gatsby-project-with-a-starter-of-your-choice","title":"Create a gatsby project with a starter of your choice","text":"<pre><code>gatsby new gatsby-cafe https://github.com/vedant14/gatsby-starter\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Remote%20Images/","title":"Remote Images","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Remote%20Images/#usage","title":"Usage","text":"<ul> <li>Download images from any string field on another node so that those images can be queried with <code>gatsby-image</code>.</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Remote%20Images/#install-plugin","title":"Install Plugin","text":"<pre><code>npm install gatsby-plugin-remote-images\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Remote%20Images/#configure-the-gatsby-config-file","title":"Configure the gatsby config file","text":"<ul> <li>Configure <code>gatsby-config.js</code></li> <li>This is cool because I can specify the node type (Book in this case) and also the path to the image and then the <code>gatsby-image</code> plugin will do the magic</li> </ul> <pre><code>{\n  resolve: `gatsby-plugin-remote-images`,\n  options: {\n    nodeType: 'Book',\n    imagePath: 'imageUrl',\n  },\n},\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/To%20Read%20Markdown%20files/","title":"To Read Markdown files","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/To%20Read%20Markdown%20files/#install-npm-package","title":"Install npm package","text":"<pre><code>npm install gatsby-transformer-remark\n</code></pre> <pre><code>{\n  resolve: `gatsby-transformer-remark`,\n},\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Using%20Dotenv/","title":"Using Dotenv","text":"<ul> <li>We will use Dotenv to pass the api keys or other sensitive information </li> <li>Read more here. </li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Using%20Dotenv/#install-the-plugin-from-npm","title":"Install the plugin from npm","text":"<pre><code>npm i dotenv\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Using%20Dotenv/#create-the-env-file-in-your-source-directory","title":"Create the .env file in your source directory","text":"<ul> <li>This command will create a file in the root of your directory</li> </ul> <pre><code>touch .env.development\n</code></pre> <ul> <li>Open it and add your keys in</li> </ul> <pre><code>AIRTABLE_API_KEY=heythisisvedantskey\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Using%20Dotenv/#add-the-following-code-in-your-config-file","title":"Add the following code in your config file","text":"<ul> <li>In the <code>gatsby-config.js</code></li> <li>This goes right at the top above the <code>module.exports line</code> too</li> </ul> <pre><code>require(\"dotenv\").config({\n    path: `.env.${process.env.NODE_ENV}`,\n})\n</code></pre> <ul> <li>and whereever you want to call the keys you can now use</li> </ul> <pre><code>process.env.AIRTABLE_API_KEY\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Basics/Using%20Dotenv/#hosting-on-netlify","title":"Hosting on Netlify","text":"<ul> <li>When you are hosting on netlify add the environment variables in the same format i.e </li> </ul> <pre><code>AIRTABLE_API_KEY=heythisisvedantskey\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/","title":"1. Installing Firebase","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#installing-firebase-and-axios","title":"Installing firebase and axios","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#install-firebase","title":"Install Firebase","text":"<pre><code>npm install firebase\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#install-axios","title":"Install Axios","text":"<pre><code>npm install axios\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#if-using-firebase-with-node-and-browser-environment","title":"If using firebase with node and browser environment","text":"<ul> <li>add the following in the <code>gatsby-node.js</code></li> </ul> <pre><code>exports.onCreateWebpackConfig = ({ actions, stage }) =&gt; {\n  if (stage === \"develop-html\" || stage === \"build-html\") {\n    actions.setWebpackConfig({\n      resolve: {\n        mainFields: [\"main\"],\n      },\n    })\n  } else {\n    actions.setWebpackConfig({\n      resolve: {\n        mainFields: [\"browser\", \"module\", \"main\"],\n      },\n    })\n  }\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#download-the-template","title":"Download the template","text":"<ul> <li>Download the file in this repo</li> <li>Paste it in the components folder </li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Dynamic%20Data/Firebase/1.%20Installing%20Firebase/#creating-config","title":"Creating config","text":"<ul> <li>Create the config file</li> </ul> <pre><code>touch src/components/Firebase/config.js\n</code></pre> <ul> <li>Add the export option below the file ``` export default firebaseConfig;</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/","title":"Form with Airtable as Backend","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#install-the-airtable-gem","title":"Install the airtable gem","text":"<pre><code>    npm i airtable\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#usage","title":"Usage","text":"<pre><code>\nimport React, { useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nexport default function SiteVisit({\n    setSiteFormShow,\n    siteFormShow,\n    projectName,\n}) {\n    const handleSiteFormClose = () =&gt; setSiteFormShow(false)\n\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [selectedCategory, setSelectedCategory] = useState(\"\")\n    const [selectedPurpose, setSelectedPurpose] = useState(\"\")\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\")\n    const [selectedDate, setSelectedDate] = useState(\"\")\n    const submitFormData = () =&gt; {\n        const formData = {\n            Name: name,\n            Email: email,\n            Category: selectedCategory,\n            Purpose: selectedPurpose,\n            Project: projectName,\n            TimeSlot: selectedTimeSlot,\n            Date: selectedDate,\n        }\n\n        const Airtable = require(\"airtable\")\n        const base = new Airtable({ apiKey: \"mykey\" }).base(\n            \"mybaseid\"\n        ) //change both the api key and baseid refer &lt;https://airtable.com/api&gt;\n        const table = base(\"Site Visits\") //use you table name inside that base\n        table.create(\n            [\n                {\n                    fields: {\n                        Name: name,\n                        Email: email,\n                        Category: selectedCategory,\n                        Purpose: selectedPurpose,\n                        Project: projectName,\n                        TimeSlot: selectedTimeSlot,\n                        Date: selectedDate,\n                    },\n                },\n            ],\n            function (err, records) {\n                if (err) {\n                    console.error(err)\n                }\n            }\n        )\n        handleSiteFormClose()\n    }\n    return (\n        &lt;div&gt;\n            &lt;Modal show={siteFormShow} onHide={handleSiteFormClose}&gt;\n                &lt;Modal.Header closeButton&gt;\n                    &lt;Modal.Title&gt;Interested in {projectName}&lt;/Modal.Title&gt;\n                &lt;/Modal.Header&gt;\n                &lt;Modal.Body&gt;\n                    &lt;Form noValidate&gt;\n                        &lt;Form.Group controlId=\"formBasicText\"&gt;\n                            &lt;Form.Label&gt;Please enter your Name&lt;/Form.Label&gt;\n                            &lt;Form.Control\n                                type=\"text\"\n                                placeholder=\"Full Name\"\n                                value={name}\n                                onChange={e =&gt; setName(e.target.value)}\n                            /&gt;\n                        &lt;/Form.Group&gt;\n                        &lt;Form.Group controlId=\"formBasicEmail\"&gt;\n                            &lt;Form.Label&gt;Your email id&lt;/Form.Label&gt;\n                            &lt;Form.Control\n                                type=\"email\"\n                                placeholder=\"info@homzhub.com\"\n                                value={email}\n                                onChange={e =&gt; setEmail(e.target.value)}\n                            /&gt;\n                            &lt;Form.Text className=\"text-muted\"&gt;\n                                We'll never share your email with anyone else.\n                            &lt;/Form.Text&gt;\n                        &lt;/Form.Group&gt;\n                        &lt;Form.Group controlId=\"formBasicDropdown\"&gt;\n                            &lt;Form.Label&gt;Choose your configuration&lt;/Form.Label&gt;\n                            &lt;Form.Control\n                                as=\"select\"\n                                value={selectedCategory}\n                                onChange={e =&gt; setSelectedCategory(e.target.value)}\n                            &gt;\n                                &lt;option&gt; &lt;/option&gt;\n                                &lt;option&gt;1 BHK&lt;/option&gt;\n                                &lt;option&gt;2 BHK&lt;/option&gt;\n                                &lt;option&gt;3 BHK&lt;/option&gt;\n                                &lt;option&gt;4+ BHK&lt;/option&gt;\n                            &lt;/Form.Control&gt;\n                        &lt;/Form.Group&gt;\n                        &lt;Form.Group controlId=\"formBasicDropdown\"&gt;\n                            &lt;Form.Label&gt;Purpose&lt;/Form.Label&gt;\n                            &lt;Form.Control\n                                as=\"select\"\n                                value={selectedPurpose}\n                                onChange={e =&gt; setSelectedPurpose(e.target.value)}\n                            &gt;\n                                &lt;option&gt; &lt;/option&gt;\n                                &lt;option&gt;End use&lt;/option&gt;\n                                &lt;option&gt;Investment&lt;/option&gt;\n                            &lt;/Form.Control&gt;\n                        &lt;/Form.Group&gt;\n                    &lt;/Form&gt;\n                &lt;/Modal.Body&gt;\n                &lt;Modal.Footer&gt;\n                    &lt;Button variant=\"secondary\" onClick={handleSiteFormClose}&gt;\n                        Close\n                    &lt;/Button&gt;\n                    &lt;Button variant=\"primary\" onClick={submitFormData}&gt;\n                        Submit\n                    &lt;/Button&gt;\n                &lt;/Modal.Footer&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#create-a-node","title":"Create a Node","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#in-gatsby-nodejs","title":"In <code>gatsby-node.js</code>","text":"<pre><code>const path = require(`path`)\nexports.createPages = ({ graphql, actions }) =&gt; {\n  const { createPage } = actions\n  return new Promise(async resolve =&gt; {\n    const result = await graphql(`\n      {\n        allAirtable(filter: { data: { BoxName: { ne: null } } }) {\n          edges {\n            node {\n              recordId\n              id\n                            slug\n            }\n          }\n        }\n      }\n    `)\n    // For each path, create page and choose a template.\n    // values in context Object are available in that page's query\n    result.data.allAirtable.edges.forEach(({ node }) =&gt; {\n      createPage({\n        path: `/${node.slug}`,\n        component: path.resolve(`./src/template/product.js`),\n        context: {\n          RecordID: node.recordId,\n        },\n      })\n    })\n    resolve()\n  })\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Forms/Form%20with%20Airtable%20as%20Backend/#in-the-template-postjs","title":"in the template <code>post.js</code>","text":"<pre><code>import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst ProductPage = ({\n    data: {\n        airtable: { data },\n    },\n}) =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{data.BoxAdditional}&lt;/h1&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport const query = graphql`\n    query ProductPageQuery($RecordID: String!) {\n        airtable(recordId: { eq: $RecordID }) {\n            data {\n                BoxAdditional\n                BoxName\n            }\n            id\n        }\n    }\n`\n\nexport default ProductPage\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Airtable/","title":"From Airtable","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Airtable/#install-the-plugin","title":"Install the plugin","text":"<ul> <li>First things first, run the command to install the plugin  </li> </ul> <pre><code>    npm install gatsby-source-airtable\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Airtable/#config","title":"Config","text":"<ul> <li>Use the plugin in the in the <code>gatsby-config.js</code></li> <li>Ensure that columns in and across the tables have unique names.</li> <li>This method is recommended since the <code>apiKey</code> is not exposed. Read more at dotenv</li> <li>Read more about the options here</li> </ul> <pre><code>{\n      resolve: `gatsby-source-airtable`,\n      options: {\n        apiKey: process.env.AIRTABLE_API_KEY, // may instead specify via env, see below\n        tables: [\n          {\n            baseId: `mybase`,\n            tableName: `Boxes`,\n            mapping: {\n                        BoxAttachments: `fileNode`,\n                        BoxAdditional: `text/markdown`\n                    },\n            tableLinks: [`BoxItems`],\n          },\n        ],\n      },\n    },\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Airtable/#creating-pages-from-airtable-records","title":"Creating Pages from Airtable Records","text":"<p>-[ ] Vedant to add</p>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Airtable/#use-airtable-for-backend-of-forms","title":"Use Airtable for backend of forms","text":"<ul> <li>Go to Link</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Firebase/","title":"From Firebase","text":"<ul> <li>A little more work than the others</li> <li>But free limit is good and is hosted by google.</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Firebase/#install-the-plugin","title":"Install the plugin","text":"<ul> <li>This was recommended on the course. Not sure if there are better plugins</li> </ul> <pre><code>npm i gatsby-firesource\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Firebase/#get-the-firebase-credentials","title":"Get the firebase credentials","text":"<ol> <li>Go to firebase console</li> <li>Go to Project Settings and then Service accounts</li> <li>Click on \"Generate new private key\", save the key in the <code>src</code> folder.  <p>Make sure the file is ignored by git</p> </li> <li>Follow the steps to include this file in <code>gatsby-config.js</code></li> </ol>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Firebase/#in-the-gatsby-config","title":"In the gatsby config","text":"<ul> <li>Point the credentials to the file you just stored in the previous step.</li> <li>Pay attention to the <code>author___NODE</code> syntax. That is used whenever we can to create a reference field.</li> <li>Read more here - Link</li> </ul> <pre><code>{\n  resolve: 'gatsby-firesource',\n  options: {\n    credential: require(\"./firebase.json\"),\n    types: [\n      {\n        type: 'Book',\n        collection: 'books',\n        map: doc =&gt; ({\n          title: doc.title,\n          isbn: doc.isbn,\n          imageUrl: doc.imageUrl, \n          author___NODE: doc.author.id,\n        }),\n      },\n      {\n        type: 'Author',\n        collection: 'authors',\n        map: doc =&gt; ({\n          name: doc.name,\n          country: doc.country,\n          books___NODE: doc.books.map(book =&gt; book.id),\n        }),\n      },\n    ],\n  },\n},\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Firebase/#creating-pages","title":"Creating pages","text":"<ul> <li>In the node file</li> </ul> <pre><code>const path = require(\"path\")\nexports.createPages = ({ graphql, actions }) =&gt; {\n  const { createPage } = actions\n  const bookTemplate = path.resolve(\"src/templates/bookTemplate.js\")\n\n  return graphql(`\n    {\n      allBook {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n  `).then(result =&gt; {\n    if (result.errors) {\n      throw result.errors\n    }\n\n    result.data.allBook.edges.forEach(book =&gt; {\n      createPage({\n        path: `/book/${book.node.id}`,\n        component: bookTemplate,\n        context: { bookId: book.node.id },\n      })\n    })\n  })\n}\n\n</code></pre> <ul> <li>In the template file </li> </ul> <pre><code>export const query = graphql`\n  query BookQuery($bookId: String!) {\n    book(id: {eq: $bookId}){\n      summary\n      title\n      localImage{\n        childImageSharp{\n          fixed(width: 200){\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      id\n      author {\n        name\n      }\n    }\n  }\n`\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20GraphCMS/","title":"From GraphCMS","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20GraphCMS/#graphcms","title":"GraphCMS","text":"<ul> <li>Good free tier</li> <li>Fast build speed</li> <li>Easy UI </li> <li>JSON and other features</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20GraphCMS/#install-the-package","title":"Install the package","text":"<pre><code>npm install gatsby-source-graphcms\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20GraphCMS/#in-the-config-file","title":"In the config file","text":"<ul> <li>Store the endpoint in the .env.development file (read dotenv for more info)</li> <li>For more options see Link</li> </ul> <pre><code>{\n  resolve: `gatsby-source-graphcms`,\n  options: {\n    endpoint: process.env.GRAPHCMS_ENDPOINT,\n    // downloadLocalImages: true,\n  },\n},\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20GraphCMS/#to-create-pages-from-graphcms","title":"To create pages from graphCMS","text":"<ul> <li>in the <code>gatsby-node.js</code> file</li> </ul> <pre><code>const path = require(\"path\")\n\nexports.createPages = async ({ actions: { createPage }, graphql }) =&gt; {\n  const { data } = await graphql(\n    `\n      {\n        pages: allGraphCmsTest(\n          sort: { order: ASC, fields: testquestions___test___publishedAt }\n        ) {\n          nodes {\n            id\n            slug\n          }\n        }\n      }\n    `\n  )\n\n  if (data.errors) throw data.errors\n\n  data.pages.nodes.forEach(page =&gt; {\n    createPage({\n      component: path.resolve(\"./src/templates/test.js\"),\n      context: {\n        id: page.id,\n        page,\n      },\n      path: `/tests/${page.slug}`,\n    })\n  })\n}\n\n</code></pre> <ul> <li>And in the template</li> </ul> <pre><code>export const query = graphql`\n  query TestQuest($id: String!) {\n    graphCmsTest(id: { eq: $id }) {\n      slug\n      id\n      title\n      description\n      testquestions {\n        questionString\n        answers\n        trivia {\n          html\n          text\n        }\n        gif {\n          url\n        }\n      }\n    }\n  }\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Json%20File/","title":"From Json File","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Json%20File/#install-plugin","title":"Install Plugin","text":"<ul> <li>Link to the plugin</li> </ul> <pre><code>npm install gatsby-transformer-json\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Json%20File/#in-the-config-file","title":"In the config file","text":"<ul> <li>Take note of where your JSON files are stores in this case I created a folder in <code>./src/data</code></li> </ul> <pre><code>`gatsby-transformer-json`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20Json%20File/#example-json-file","title":"Example <code>.json</code> file","text":"<pre><code>[\n    {\n        \"question\": \"Something\",\n        \"value\": \"a\",\n    }, \n    {\n        \"question\": \"Something\",\n        \"value\": \"a\",\n    }, \n    {\n        \"question\": \"Something\",\n        \"value\": \"a\",\n    }, \n]\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20YAML%20files/","title":"From YAML files","text":"<ul> <li>Works with <code>.yml</code> and <code>.yaml</code> files</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20YAML%20files/#install-plugin-","title":"Install Plugin -","text":"<ul> <li> <p>Link to the plugin</p> <p><code>ruby npm install gatsby-transformer-yaml</code></p> </li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Importing%20Data/From%20YAML%20files/#in-config-file","title":"In config file","text":"<pre><code>module.exports = {\n  plugins: [\n    `gatsby-transformer-yaml`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n  ],\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/New%20Project/1.%20Start/","title":"1. Start","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/New%20Project/1.%20Start/#intialize-using","title":"Intialize using","text":"<pre><code>npm init gatsby\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Infinte%20Scroll/","title":"Infinte Scroll","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Infinte%20Scroll/#resources","title":"Resources","text":"<ol> <li>https://www.erichowey.dev/writing/load-more-button-and-infinite-scroll-in-gatsby/</li> <li>https://scotch.io/tutorials/build-an-infinite-scroll-image-gallery-with-gatsby-and-netlify-functions</li> <li>https://github.com/baobabKoodaa/gatsby-starter-infinite-scroll</li> <li>https://github.com/baobabKoodaa/blog</li> </ol>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Using%20States/","title":"Using States","text":"<ul> <li>States are very interesting. These are variables in react that can persist just for that session of the browser. </li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Using%20States/#importing-state-with-react","title":"Importing state with React","text":"<pre><code>import React, { useState } from \"react\"\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Using%20States/#creating-the-variables","title":"Creating the variables","text":"<ul> <li>Pay attention to the syntax while naming the variables</li> <li>We set a default also</li> </ul> <pre><code>const [selectedRole, setSelectedRole] = useState(null)\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Using%20States/#changing-the-variable-value","title":"Changing the variable value","text":"<pre><code>setSelectedRole(null)\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/React%20Basics/Using%20States/#toggle-states","title":"Toggle States","text":"<pre><code>function toggleIndiaPricing() {\n    setSelectedIndia((prevSelectedIndia) =&gt; !prevSelectedIndia);\n}\n</code></pre> <pre><code>&lt;button onClick={toggleIndiaPricing}&gt;India&lt;/button&gt;\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/SEO/Creating%20Social%20Cards/","title":"Creating Social Cards","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/SEO/Creating%20Social%20Cards/#read-more-here","title":"Read more here","text":"<ul> <li>Link</li> </ul>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/SEO/Creating%20Social%20Cards/#update-seo-component-with","title":"Update <code>SEO</code> component with","text":"<pre><code>import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport function SEO({\n  description,\n  lang,\n  meta,\n  image: metaImage,\n  title,\n  pathname,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage &amp;&amp; metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    &lt;Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: \"keywords\",\n          content: site.siteMetadata.keywords.join(\",\"),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    /&gt;\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/SEO/Creating%20Social%20Cards/#in-the-page-file","title":"In the page file","text":"<ul> <li>Focus on the <code>&lt;SEO&gt;</code> tag </li> </ul> <pre><code>import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const image = post.frontmatter.image\n      ? post.frontmatter.image.childImageSharp.resize\n      : null\n\n    return (\n      &lt;Layout location={this.props.location} title={siteTitle}&gt;\n        &lt;SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n          image={image}\n          pathname={this.props.location.pathname}\n        /&gt;\n        &lt;h1&gt;{post.frontmatter.title}&lt;/h1&gt;\n        &lt;div dangerouslySetInnerHTML={{ __html: post.html }} /&gt;\n      &lt;/Layout&gt;\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        description\n        image: featured {\n          childImageSharp {\n            resize(width: 1200) {\n              src\n              height\n              width\n            }\n          }\n        }\n      }\n    }\n  }\n`\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Search/Local%20Search/","title":"Local Search","text":""},{"location":"Front-end%20Frameworks/2.%20Gatsby/Search/Local%20Search/#install-the-plugin","title":"Install the plugin","text":"<ul> <li>Link for the documentation here</li> </ul> <pre><code>npm install --save gatsby-plugin-local-search\n</code></pre>"},{"location":"Front-end%20Frameworks/2.%20Gatsby/Search/Local%20Search/#creating-the-index","title":"Creating the index","text":"<ul> <li>I used it to index data from my airtable so the code for <code>gatsby-config.js</code> is</li> </ul> <pre><code>    {\n      resolve: \"gatsby-plugin-local-search\",\n      options: {\n        // A unique name for the search index. This should be descriptive of\n        // what the index contains. This is required.\n        name: \"brands\",\n\n        // Set the search engine to create the index. This is required.\n        // The following engines are supported: flexsearch, lunr\n        engine: \"flexsearch\",\n\n        // Provide options to the engine. This is optional and only recommended\n        // for advanced users.\n        //\n        // Note: Only the flexsearch engine supports options.\n        engineOptions: \"speed\",\n\n        // GraphQL query used to fetch all data for the search index. This is\n        // required.\n        query: `\n        {\n          allAirtable(filter: {table: {eq: \"Brands\"}}) {\n            nodes {\n              id\n              data {\n                CategorySearchName\n                Name\n                Description\n                slug\n                CategoryDisplayName\n                Image {\n                  localFiles {\n                    publicURL\n                  }\n                }\n              }\n            }\n          }\n        }\n        `,\n        // Field used as the reference value for each document.\n        // Default: 'id'.\n        ref: \"id\",\n\n        // List of keys to index. The values of the keys are taken from the\n        // normalizer function below.\n        // Default: all fields\n        index: [\"Name\", \"CategoryID\"],\n\n        // List of keys to store and make available in your UI. The values of\n        // the keys are taken from the normalizer function below.\n        // Default: all fields\n        store: [\n          \"id\",\n          \"Name\",\n          \"CategoryID\",\n          \"Category\",\n          \"path\",\n          \"Description\",\n          \"Image\",\n        ],\n\n        // Function used to map the result from the GraphQL query. This should\n        // return an array of items to index in the form of flat objects\n        // containing properties to index. The objects must contain the\n        // field above (default: 'id'). This is required.\n        normalizer: ({ data }) =&gt;\n          data.allAirtable.nodes.map(node =&gt; ({\n            id: node.id,\n            path: node.data.slug,\n            Name: node.data.Name,\n            CategoryID: node.data.CategorySearchName,\n            Description: node.data.Description,\n            Category: node.data.CategoryDisplayName,\n            Image: node.data.Image,\n          })),\n      },\n    },\n</code></pre>"},{"location":"Front-end%20Frameworks/3.%20Jekyll/","title":"My Jekyll notes","text":"<ul> <li>Jekyll is a static site generator.</li> <li>When I came across jekyll it opened my mind to the possibility of hosting a site for free. And the amazing possibility of staticly generated sites</li> <li>Jekyll is pretty easy to wrap your head around. It took me probably less than a day to understand it. </li> </ul>"},{"location":"Front-end%20Frameworks/3.%20Jekyll/New%20Jekyll%20project/","title":"New Jekyll project","text":""},{"location":"Front-end%20Frameworks/3.%20Jekyll/New%20Jekyll%20project/#start-a-server","title":"Start a server","text":"<pre><code>bundle exec jekyll serve --livereload\n</code></pre>"},{"location":"Integrations/Shopify/","title":"Index","text":"<p>Creating a new shopify app. </p>"},{"location":"Integrations/Shopify/#with-the-cli","title":"With the CLI","text":"<ul> <li>Although I did not want to start with CLI, that is what is recommended in their docs and I will later figure out how to do it other wise. </li> </ul>"},{"location":"Integrations/Shopify/Commands%20CLI/","title":"Commands CLI","text":""},{"location":"Integrations/Shopify/Commands%20CLI/#create-a-new-shopify-app","title":"Create a new shopify app","text":"<pre><code>shopify app create\n</code></pre>"},{"location":"Integrations/Shopify/Commands%20CLI/#start-a-new-development-server","title":"Start a new development server","text":"<pre><code>shopify app serve\n</code></pre>"},{"location":"Integrations/Shopify/Commands%20CLI/#git-pushs","title":"Git pushs","text":"<ul> <li>Something weird happens with the git pushes</li> </ul>"},{"location":"Integrations/Shopify/Commands%20CLI/#to-push-to-github","title":"To push to github","text":"<pre><code>git push origin\n</code></pre>"},{"location":"Integrations/Shopify/Commands%20CLI/#to-push-heroku","title":"To push heroku","text":"<pre><code>shopify app deploy heroku\n</code></pre>"},{"location":"Integrations/Shopify/Learning%20from%20Scratch/","title":"Learning from Scratch","text":""},{"location":"Integrations/Shopify/Learning%20from%20Scratch/#cli-template","title":"CLI Template","text":"<ul> <li>LINK</li> <li>How do I get information of a install<ul> <li>Webhook</li> </ul> </li> <li>Current Store info<ul> <li>This should be enough<ul> <li>For this I need to know how do I get the session</li> </ul> </li> </ul> </li> </ul> <pre><code>\nhttps://particypants.myshopify.com/admin/oauth/authorize?client_id=dddbd358e076345b37623e7adedfcb0f&amp;scope=read_locales,read_products&amp;redirect_uri=http://http://localhost:3000/api/auth/callback&amp;state=407023223723639&amp;grant_options[]=\n</code></pre>"},{"location":"Integrations/Shopify/Learning%20from%20Scratch/#nextjs-template","title":"NextJS template","text":"<ul> <li>LINK</li> <li>That template did not make it clear on how the login happens since it does not use the standard install flow</li> </ul>"},{"location":"Integrations/Shopify/Links/","title":"Links","text":"<ol> <li>Getting Started</li> <li>Graphql Docs</li> <li>Graphql Interface</li> <li>Partner Login</li> <li>Polaris</li> </ol>"},{"location":"Integrations/Shopify/Mutations/","title":"Mutations","text":"<p>![[Pasted image 20211015140737.png]]</p>"},{"location":"Integrations/Shopify/References/","title":"References","text":"<ol> <li>https://github.com/Shopify/shopify-app-examples/tree/main/qr-code/node</li> <li>https://github.com/Shopify/shopify-app-template-node</li> <li>https://gadget.dev/blog/shopify-post-purchase-extension-upsell-tutorial</li> <li>https://www.smoothcode.io</li> <li>https://www.reddit.com/r/shopify/search/?q=app%20pain&amp;restrict_sr=1&amp;sr_nsfw=</li> </ol>"},{"location":"Integrations/Shopify/Tutorial/","title":"Tutorial","text":""},{"location":"Integrations/Shopify/Tutorial/#create-a-new-folder-and-initialise-the-npm","title":"Create a new folder and initialise the npm","text":"<pre><code>npm init -y\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#install-react-react-dom-next","title":"Install react / react-dom / next","text":"<pre><code>npm install --save react react-dom next\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#create-pages","title":"Create pages","text":"<pre><code>mkdir pages\n</code></pre> <pre><code>cd pages\n</code></pre> <pre><code>touch index.js\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#add-boiler-plate-for-nextjs","title":"Add boiler plate for nextJs","text":"<ul> <li>Add this in the scripts tag</li> </ul> <pre><code>\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n},\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#creating-the-shopify-app","title":"Creating the shopify app","text":"<ol> <li>Install Ngrok and run it on https 3000</li> <li>Create a new public app on shopify and add in the ngrok url</li> <li>Then copy the shopify keys to the <code>.env</code> file</li> </ol> <pre><code>SHOPIFY_API_KEY='someapikey'\nSHOPIFY_API_SECRET_KEY='somesecretapikey'\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#to-create-the-oauth-system","title":"To create the Oauth System","text":""},{"location":"Integrations/Shopify/Tutorial/#install-koa","title":"install koa","text":"<pre><code>npm install koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch @shopify/koa-shopify-graphql-proxy\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#create-the-node-server","title":"Create the node server","text":"<pre><code>touch server.js\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#store-js","title":"Store js","text":"<ul> <li>Storejs gives us the ability to store data in the user's local storage</li> </ul> <pre><code>npm install store-js\n</code></pre> <ul> <li>Importing it</li> </ul> <pre><code>import store from \"store-js\"\n</code></pre>"},{"location":"Integrations/Shopify/Tutorial/#to-avoid-ngrok-timeout","title":"To avoid ngrok timeout","text":"<p>To avoid tunnels that timeout, it is recommended to signup for a free ngrok account at https://ngrok.com/signup. After you signup, install your personalized authorization token </p> <pre><code>shopify node tunnel auth mytoke\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/","title":"Index","text":""},{"location":"Integrations/Shopify/Extensions/#create-a-new-shopify-extension","title":"Create a new shopify extension","text":"<pre><code>shopify extension create\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/#start-the-extension","title":"Start the extension","text":"<pre><code>shopify extension serve\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/#register-a-new-component","title":"Register a new component","text":"<pre><code>shopify extension register\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/#create-a-new-version-of-the-component","title":"Create a new version of the component","text":"<pre><code>shopify extension push\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/#link-to-the-components","title":"Link to the components","text":"<ul> <li>Link</li> </ul>"},{"location":"Integrations/Shopify/Extensions/Post%20Purchase/","title":"Post Purchase","text":""},{"location":"Integrations/Shopify/Extensions/Post%20Purchase/#to-enable-the-post-purchase","title":"To enable the post purchase","text":""},{"location":"Integrations/Shopify/Extensions/Post%20Purchase/#use-ngrok-to-create-the-tunnel","title":"Use Ngrok to create the tunnel","text":"<pre><code>ngrok http 4000\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/Post%20Purchase/#serve-the-extension","title":"Serve the extension","text":"<pre><code>npm run dev -- --tunnel-url &lt;ngrok tunnel&gt;:4000\n</code></pre>"},{"location":"Integrations/Shopify/Extensions/Post%20Purchase/#final-steps","title":"Final steps","text":"<ol> <li>Add the URL to the chrome extension</li> <li>And the transaction has to be a credit card transaction</li> </ol>"},{"location":"Integrations/Slack/index.js/","title":"Index.js","text":""},{"location":"Integrations/Slack/index.js/#starter-by-a-fellow-builder-in-build","title":"Starter by a fellow builder in build","text":"<p>https://github.com/utsavdotpro/starter-bolt-prisma-ts</p>"},{"location":"Tools%20and%20tricks/Dev%20Notes/","title":"Introduction","text":"<p>These are the notes for the documentation site you are viewing. Some commands that will help me maintain this site.</p>"},{"location":"Tools%20and%20tricks/Dev%20Notes/#hosting-and-deploys","title":"Hosting and deploys","text":"<ul> <li>This site is hosted on github repo</li> <li>To push any new change type in</li> </ul> <pre><code>    mkdocs gh-deploy\n</code></pre> <ul> <li> <p>I have written a script that will deploy the code automatically with the command <code>deploynotes</code></p> </li> <li> <p>To preview the changes locally use the command</p> </li> </ul> <pre><code>    mkdocs serve\n</code></pre> <ul> <li>I have written a script that will run the code locally with the command <code>viewnotes</code></li> </ul>"},{"location":"Tools%20and%20tricks/Dev%20Notes/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Current%20Setup/","title":"Current Setup","text":"<ol> <li> <p>Auto-backup on iCloud</p> <ul> <li>My files are stored in an iCloud folder as a fail safe.</li> <li>So, even if I forget to push the code to git, I have still a copy on iCloud</li> <li>As you can imagine, losing these notes would be catastrophic</li> </ul> </li> <li> <p>Using Obsidian to edit the files</p> <ul> <li>Obsidian is my editor of choice.</li> <li>Yes, I could use Sublime too. Which I use for writing code.</li> <li>But since I use obsidian for my daily notes, it is always on. So quickly adding a snippet is not a problem. </li> <li>Plus, the predective/assitive text in sublime, while helpful for writing code, is really irritating for normal writing purposes. </li> </ul> </li> <li> <p>Aliases on my ~/.zshrc file</p> <ul> <li>Since the files are on iCloud folder, navigating to them via terminal and then pushing them on git is a bit impractical.</li> <li>So I added the following aliases on my ~/.zshrc file</li> <li>Just makes my life easier</li> </ul> </li> </ol> <pre><code>alias viewnotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes\"\n\nalias localnotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes; MkDocs serve\"\n\nalias deploynotes=\"cd ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Dev-notes; mkdocs gh-deploy; cd\"\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Current%20Setup/#commands-to-use","title":"Commands to use","text":"<ul> <li>To open the ~/.zshrc file</li> </ul> <pre><code>open -e ~/.zshrc\n</code></pre> <ul> <li>To load/source the ~/.zshrc file</li> </ul> <pre><code>source ~/.zshrc\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Internal%20linking/","title":"Internal linking","text":""},{"location":"Tools%20and%20tricks/Dev%20Notes/Internal%20linking/#internal-linking","title":"Internal linking","text":"<ul> <li>When I want to add a link to a page from this site itself. </li> </ul>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Internal%20linking/#how-to-do","title":"How to do","text":"<ul> <li>To do internal linking, we need to provide relative paths. </li> <li>This is one example</li> </ul> <pre><code>Read more at [dotenv](../Basics/Using Dotenv.md)\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Material%20Theme/","title":"Material Theme","text":"<ul> <li>I run the material theme for mkdocs as you can tell by the footer of this page</li> <li>I also have customised this site and will continue to do so, to suit my needs further. </li> <li>My favorite customisation for now, is the placement of the <code>copy snippet</code> button. Small thing, but makes copying code so much easier for me. </li> </ul> <pre><code>See the position of the copy button?\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Setup%20-%20nvm/","title":"Setup   nvm","text":""},{"location":"Tools%20and%20tricks/Dev%20Notes/Setup%20-%20nvm/#to-find-all-the-installed-version-of-node","title":"To find all the installed version of node","text":"<pre><code>nvm ls\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Setup%20-%20nvm/#to-use-a-specific-version-of-node","title":"To use a specific version of node","text":"<pre><code>nvm use v11.14.0\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Setup%20-%20nvm/#to-install-a-new-node-version","title":"To install a new node version","text":"<pre><code>nvm install v11.14.0\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/Setup%20-%20nvm/#to-uninstall-a-specific-node-version","title":"To uninstall a specific node version","text":"<ul> <li>You cannot uninstall an active node version</li> </ul> <pre><code>nvm uninstall v14.15.2\n</code></pre>"},{"location":"Tools%20and%20tricks/Dev%20Notes/my-mkdocs-config/","title":"My <code>Mkdocs.yml</code> file","text":"<ul> <li>Copy it directly if you want.</li> </ul> <pre><code>site_name: Vedant's Dev Notes\ntheme:\n  name: material\n  features:\n    - navigation.tabs\n    - navigation.instant\n    - toc.integrate\n    - navigation.top\n\n  #logo: fontawesome/brands/twitter\n  #favicon: images/favicon.png\n\n  font:\n    text: Inter\n    code: Roboto Mono\n\nextra_css:\n  - stylesheets/extra.css\n\nextra:\n  social:\n    - icon: fontawesome/regular/user-circle\n      link: https://www.vedantlohbare.com\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/vedantlohbare\n    - icon: fontawesome/brands/linkedin\n      link: https://www.linkedin.com/in/vedant-lohbare/\n    - icon: fontawesome/brands/github\n      link: https://github.com/vedant14/dev-notes\n    - icon: fontawesome/brands/strava\n      link: https://www.strava.com/athletes/25910894\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/","title":"Index","text":""},{"location":"Tools%20and%20tricks/Github/#initialise-a-git-repo","title":"Initialise a git repo","text":"<ul> <li>This will create a git repo inside the directory you are currently in.</li> </ul> <pre><code>git init\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#create-a-branch-from-master","title":"Create a branch from master","text":"<ul> <li>From master meaning, the new branch that will be created will at first be identical to master</li> <li>You need to run git push after this so that these changes are reflected in github too.</li> </ul> <pre><code>git checkout -b new-model\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#check-the-branches-created-for-a-particular-repo","title":"Check the branches created for a particular repo","text":"<ul> <li>If you want to find what are the various branches in an existing repo, then use this command.</li> </ul> <pre><code>git branch\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#checkout-to-an-existing-branch","title":"Checkout to an existing branch","text":"<pre><code>git checkout &lt;branchname&gt;\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#git-commit-message-ammend","title":"Git commit message ammend","text":"<pre><code>git commit --amend -m\"Bug fix for the head tag\"\n</code></pre> <ul> <li>Git reset </li> <li>To undo every change that has happened since a given commit occurred, use git reset</li> </ul> <pre><code>\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#git-revert","title":"Git Revert","text":"<ul> <li>Don't use</li> <li>This will just undo the changes done to the code during that git commit, not the one preceeding or suceeding them</li> <li>Good article on this</li> </ul> <pre><code>git revert SHA\n</code></pre> <ul> <li>If you want to reverse the action do this</li> </ul> <pre><code>git cherry-pick SHA\n</code></pre>"},{"location":"Tools%20and%20tricks/Github/#git-delete-local-branch","title":"Git Delete local branch","text":"<pre><code>git branch -d &lt;branch name&gt;\n</code></pre>"},{"location":"Tools%20and%20tricks/Terminal/","title":"Index","text":"<pre><code>open ~/.zshrc\n</code></pre> <pre><code>exec zsh\n</code></pre>"}]}